{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<ul> <li> <p>UiPath SDK</p> <p>Code with full UiPath context to build custom automations and agents from the ground up.</p> <p>Start Building</p> </li> </ul> <ul> <li> <p>UiPath MCP SDK</p> <p>Build and host Coded MCP Servers within UiPath.</p> <p>Start Building</p> </li> </ul>  Extensions  <ul> <li> <p>UiPath Langchain SDK</p> <p>Build enterprise-grade UiPath agents using the LangChain framework, with seamless integration from build to run.</p> <p>Get Started</p> </li> <li> <p>UiPath LlamaIndex SDK</p> <p>Build enterprise-grade UiPath agents using the LlamaIndex framework, with seamless integration from build to run.</p> <p>Get Started</p> </li> </ul>"},{"location":"AutomationSuite/","title":"Automation Suite","text":""},{"location":"AutomationSuite/#airgapped-deployments","title":"Airgapped Deployments","text":"<p>Airgapped Automation Suite environments (deployments without internet access) require special configuration for Python package dependencies. You need to configure your project to use a Python package feed that is accessible within your environment.</p> <p>You have two main options for managing Python packages:</p> <ol> <li>Use Azure DevOps Artifacts - Leverage Azure DevOps as a Python package feed with upstream PyPI sources (suitable for environments with restricted but not fully airgapped access)</li> <li>Host your own Python package index - Set up a self-hosted PyPI mirror or repository within your infrastructure (required for truly airgapped environments)</li> </ol>"},{"location":"AutomationSuite/#using-azure-devops-artifacts-as-a-python-feed","title":"Using Azure DevOps Artifacts as a Python Feed","text":"<p>Azure DevOps Artifacts can serve as a private Python package feed that includes packages from common public sources (PyPI). This is suitable for environments with restricted internet access where Azure DevOps services are still accessible.</p>"},{"location":"AutomationSuite/#step-1-create-an-azure-devops-artifacts-feed","title":"Step 1: Create an Azure DevOps Artifacts Feed","text":"<ol> <li>Navigate to your Azure DevOps project</li> <li>Go to Artifacts</li> <li>Click Create Feed</li> <li>Configure your feed settings and ensure you select the option to Include packages from common public sources (this will upstream PyPI packages)</li> </ol>"},{"location":"AutomationSuite/#step-2-authenticate-with-a-personal-access-token-pat","title":"Step 2: Authenticate with a Personal Access Token (PAT)","text":"<p>You'll need to create a Personal Access Token (PAT) to authenticate with your Azure DevOps feed.</p> <ol> <li>Follow the Microsoft documentation to create a PAT</li> <li>Ensure your PAT has at least Packaging (Read) permissions</li> <li>Save your PAT securely - you'll need it for the next step</li> </ol>"},{"location":"AutomationSuite/#step-3-configure-your-project","title":"Step 3: Configure Your Project","text":"<p>Add the following configuration to your <code>pyproject.toml</code> file:</p> <pre><code>[[tool.uv.index]]\nname = \"my-feed\"\nurl = \"https://az:PAT_STRING@YOUR_ORG.pkgs.visualstudio.com/YourProject/_packaging/my-feed/pypi/simple/\"\npublish-url = \"https://az:PAT_STRING@YOUR_ORG.pkgs.visualstudio.com/YourProject/_packaging/my-feed/pypi/upload/\"\ndefault = true\n</code></pre> <p>Replace the following placeholders:</p> <ul> <li><code>PAT_STRING</code>: Your actual Personal Access Token from Step 2</li> <li><code>YOUR_ORG</code>: Your Azure DevOps organization name</li> <li><code>YourProject</code>: Your Azure DevOps project name</li> <li><code>my-feed</code>: The name of your feed (in both the <code>name</code> field and the URL)</li> </ul> <p>Tip</p> <p>Organization-scoped feeds: If you're using an organization-scoped feed instead of a project-scoped feed, the URL format will be slightly different, but the same authentication logic applies. The URL will follow this pattern:</p> <pre><code>url = \"https://az:PAT_STRING@YOUR_ORG.pkgs.visualstudio.com/_packaging/my-feed/pypi/simple/\"\n</code></pre> <p>Note the absence of the project name in the URL path.</p> <p>Tip</p> <p>Using environment variables: You can also configure the feed URL using environment variables instead of hardcoding the PAT in <code>pyproject.toml</code>:</p> <pre><code>[[tool.uv.index]]\nname = \"my-feed\"\nurl = \"https://az:${AZURE_DEVOPS_PAT}@YOUR_ORG.pkgs.visualstudio.com/YourProject/_packaging/my-feed/pypi/simple/\"\ndefault = true # to use this feed as your default\n</code></pre> <p>Then set the environment variable before running your commands locally:</p> <pre><code>export AZURE_DEVOPS_PAT=your_pat_token\n</code></pre> <p>Important: When deploying your process to UiPath, you'll need to configure these environment variables in the process settings. Navigate to your process in UiPath Orchestrator and add the environment variables (e.g., <code>AZURE_DEVOPS_PAT</code>) with their corresponding values. This ensures your process can authenticate with the external feed when running in the UiPath environment.</p> <p>Tip</p> <p>Specifying sources for specific packages: If you don't want to set your custom feed as the default, you can use <code>[tool.uv.sources]</code> to specify which packages should come from your custom feed:</p> <pre><code>[[tool.uv.index]]\nname = \"my-feed\"\nurl = \"https://az:PAT_STRING@YOUR_ORG.pkgs.visualstudio.com/YourProject/_packaging/my-feed/pypi/simple/\"\n\n[tool.uv.sources]\nuipath = { index = \"my-feed\" }\n# Add other packages as needed\nsome-private-package = { index = \"my-feed\" }\n</code></pre> <p>This allows you to selectively pull specific packages from your custom feed while using the default PyPI for others.</p>"},{"location":"AutomationSuite/#step-4-install-dependencies","title":"Step 4: Install Dependencies","text":"<p>Once configured, you can install dependencies using <code>uv</code>:</p> uv add uipath\u280b Resolved 25 packages from my-feed\u2713  Successfully installed uipath"},{"location":"AutomationSuite/#verification","title":"Verification","text":"<p>To verify your feed configuration is working correctly, you can check that <code>uv</code> resolves packages from your custom feed:</p> uv add --dry-run uipath\u280b Checking package availability...\u2713  All packages available from my-feed"},{"location":"AutomationSuite/#hosting-your-own-python-package-index","title":"Hosting Your Own Python Package Index","text":"<p>For truly airgapped deployments where you need complete control over your infrastructure, you can host your own Python package index within your network. This approach eliminates any external dependencies and provides full control over the packages available in your environment.</p>"},{"location":"AutomationSuite/#popular-self-hosted-solutions","title":"Popular Self-Hosted Solutions","text":"<p>Several tools are available for hosting a Python package index:</p> <ul> <li>devpi - A PyPI-compatible server with caching and mirroring capabilities</li> <li>PyPI Server - A minimal PyPI-compatible server for hosting packages</li> <li>JFrog Artifactory - Enterprise artifact repository with Python support</li> <li>Sonatype Nexus Repository - Universal artifact repository manager</li> <li>bandersnatch - PyPI mirror client for creating a complete or filtered mirror</li> </ul>"},{"location":"AutomationSuite/#configuration-for-self-hosted-index","title":"Configuration for Self-Hosted Index","text":"<p>Once you have your Python package index set up and accessible within your airgapped network, configure your <code>pyproject.toml</code> to point to it:</p> <pre><code>[[tool.uv.index]]\nname = \"internal-pypi\"\nurl = \"https://pypi.internal.company.com/simple/\"\ndefault = true\n</code></pre> <p>If your internal index requires authentication:</p> <pre><code>[[tool.uv.index]]\nname = \"internal-pypi\"\nurl = \"https://username:password@pypi.internal.company.com/simple/\"\ndefault = true\n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing to UiPath SDK","text":""},{"location":"CONTRIBUTING/#local-development-setup","title":"Local Development Setup","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install Python \u2265 3.10:</p> <ul> <li>Download and install Python 3.10 from the official Python website</li> <li>Verify the installation by running:     <pre><code>python3.10 --version\n</code></pre></li> </ul> <p>Alternative: mise</p> </li> <li> <p>Install uv:     Follow the official installation instructions for your operating system.</p> </li> <li> <p>Create a virtual environment in the current working directory:     <pre><code>uv venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> <ul> <li>Linux/Mac <pre><code>source .venv/bin/activate\n</code></pre></li> <li>Windows Powershell <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre></li> <li>Windows Bash <pre><code>source .venv/Scripts/activate\n</code></pre></li> </ul> </li> <li> <p>Install dependencies:     <pre><code>uv sync --all-extras --no-cache\n</code></pre></p> </li> </ol> <p>For additional commands related to linting, formatting, and building, run <code>just --list</code>.</p>"},{"location":"CONTRIBUTING/#using-the-sdk-locally","title":"Using the SDK Locally","text":"<ol> <li> <p>Create a project directory:     <pre><code>mkdir project\ncd project\n</code></pre></p> </li> <li> <p>Initialize the Python project:     <pre><code>uv init . --python 3.10\n</code></pre></p> </li> <li> <p>Set the SDK path:     <pre><code>PATH_TO_SDK=/Users/YOUR_USERNAME/uipath-python\n</code></pre></p> </li> <li> <p>Install the SDK in editable mode:     <pre><code>uv add --editable ${PATH_TO_SDK}\n</code></pre></p> </li> </ol> <p>Note: Instead of cloning the project into <code>.venv/lib/python3.10/site-packages/uipath</code>, this mode creates a file named <code>_uipath.pth</code> inside <code>.venv/lib/python3.10/site-packages</code>. This file contains the value of <code>PATH_TO_SDK</code>, which is added to <code>sys.path</code>\u2014the list of directories where Python searches for packages. To view the entries, run <code>python -c 'import sys; print(sys.path)'</code>.</p>"},{"location":"CONTRIBUTING/#api-style-guide","title":"API Style Guide","text":""},{"location":"CONTRIBUTING/#general-rule","title":"General Rule","text":"<ul> <li>Use <code>key</code> instead of <code>id</code> for resource identifiers</li> </ul>"},{"location":"CONTRIBUTING/#standard-methods-and-naming-conventions","title":"Standard Methods and Naming Conventions","text":""},{"location":"CONTRIBUTING/#retrieve-a-single-resource","title":"Retrieve a Single Resource","text":"<ul> <li>Method Name: <code>retrieve</code></li> <li>Purpose: Obtain a specific resource instance using its unique identifier (using <code>key</code> instead of <code>id</code>)</li> <li>Variations:</li> <li><code>retrieve_by_[field_name]</code> (for fields other than <code>key</code>)</li> </ul>"},{"location":"CONTRIBUTING/#list-multiple-resources","title":"List Multiple Resources","text":"<ul> <li>Method Name: <code>list</code></li> <li>Purpose: Fetch a collection of resources, optionally filtered by query parameters</li> <li>Example: <pre><code>resources = Resource.list(filters={})\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#create-a-resource","title":"Create a Resource","text":"<ul> <li>Method Name: <code>create</code></li> <li>Purpose: Add a new resource to the system</li> </ul>"},{"location":"CONTRIBUTING/#update-a-resource","title":"Update a Resource","text":"<ul> <li>Method Name: <code>update</code></li> <li>Purpose: Modify an existing resource</li> </ul>"},{"location":"FAQ/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"FAQ/#q-why-am-i-getting-a-failed-to-prepare-environment-error-when-deploying-my-python-agent-to-uipath-cloud-platform","title":"Q: Why am I getting a \"Failed to prepare environment\" error when deploying my python agent to UiPath Cloud Platform?","text":""},{"location":"FAQ/#error-message","title":"Error Message","text":"<pre><code>{\n    \"Code\": \"Serverless.PythonCodedAgent.PrepareEnvironmentError\",\n    \"Title\": \"Failed to prepare environment\",\n    \"Detail\": \"An error occurred while installing the package dependencies. Please try again. If the error persists, please contact support.\",\n    \"Category\": \"System\",\n    \"Status\": null\n}\n</code></pre>"},{"location":"FAQ/#visual-example","title":"Visual Example","text":"<p>Example of the error as it appears in UiPath Cloud Platform</p>"},{"location":"FAQ/#description","title":"Description","text":"<p>This error might occur when deploying coded-agents to UiPath Cloud Platform, even though the same project might work correctly in your local environment. The issue is often related to how Python packages are discovered and distributed during the cloud deployment process.</p>"},{"location":"FAQ/#common-causes","title":"Common Causes","text":"<ol> <li>Multiple top-level packages or modules in your project structure</li> <li>Improper configuration or formatting in the pyproject.toml or requirements.txt files</li> </ol>"},{"location":"FAQ/#solution","title":"Solution","text":""},{"location":"FAQ/#1-check-your-project-structure","title":"1. Check Your Project Structure","text":"<ul> <li>Ensure your Python files are organized under a non top-level directory (e.g., using the <code>src</code> layout)</li> <li>Follow the recommended project structure:</li> </ul> <pre><code>project_root/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 your_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 your_modules.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 setup.cfg/setup.py\n</code></pre>"},{"location":"FAQ/#2-configure-package-discovery","title":"2. Configure Package Discovery","text":"<p>If you need to maintain your current project structure, you can configure custom package discovery in your <code>pyproject.toml</code>:</p> <pre><code>[tool.setuptools]\npy-modules = []\npackages = [\"your_package\"]\n</code></pre>"},{"location":"FAQ/#3-verify-dependencies","title":"3. Verify Dependencies","text":"<ul> <li>Ensure all required dependencies are properly listed in your <code>requirements.txt</code> or <code>pyproject.toml</code></li> </ul>"},{"location":"FAQ/#reference","title":"Reference","text":"<p>For more detailed information about package discovery and configuration, refer to the official setuptools documentation.</p>"},{"location":"FAQ/#q-why-am-i-getting-timeouts-or-ssl-certificate_verify_failed-certificate-verify-failed-errors","title":"Q: Why am I getting timeouts or \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" errors?","text":"<p>The UiPath CLI automatically works with your corporate network setup, including proxy servers and security tools like ZScaler, by leveraging your system's native SSL certificate store.</p>"},{"location":"FAQ/#proxy-configuration","title":"Proxy Configuration","text":"<p>Configure these environment variables to route CLI traffic through your corporate proxy:</p> Linux/macOS BashWindows PowerShellWindows CMD export HTTP_PROXY=http://proxy.company.com:8080export HTTPS_PROXY=https://proxy.company.com:8080export NO_PROXY=localhost,127.0.0.1uipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful. $env:HTTP_PROXY=\"http://proxy.company.com:8080\"$env:HTTPS_PROXY=\"https://proxy.company.com:8080\"$env:NO_PROXY=\"localhost,127.0.0.1\"uipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful. set HTTP_PROXY=http://proxy.company.com:8080set HTTPS_PROXY=https://proxy.company.com:8080set NO_PROXY=localhost,127.0.0.1uipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful."},{"location":"FAQ/#proxy-authentication","title":"Proxy Authentication","text":"Linux/macOS BashWindows PowerShellWindows CMD export HTTP_PROXY=http://username:password@proxy.company.com:8080export HTTPS_PROXY=https://username:password@proxy.company.com:8080export NO_PROXY=localhost,127.0.0.1uipath publish\u280b Fetching available package feeds...\u2713  Package published successfully! $env:HTTP_PROXY=\"http://username:password@proxy.company.com:8080\"$env:HTTPS_PROXY=\"https://username:password@proxy.company.com:8080\"$env:NO_PROXY=\"localhost,127.0.0.1\"uipath publish\u280b Fetching available package feeds...\u2713  Package published successfully! set HTTP_PROXY=http://username:password@proxy.company.com:8080set HTTPS_PROXY=https://username:password@proxy.company.com:8080set NO_PROXY=localhost,127.0.0.1uipath publish\u280b Fetching available package feeds...\u2713  Package published successfully! <p>Tip</p> <p>For IT Administrators: Add these environment variables to your Group Policy or system configuration:</p> <pre><code>HTTP_PROXY=http://your-proxy.company.com:8080\nHTTPS_PROXY=https://your-proxy.company.com:8080\nNO_PROXY=localhost,127.0.0.1,*.company.com\n</code></pre> <p>Warning</p> <p>The CLI uses a local HTTP server for the authentication callback. You must exclude localhost from your proxy using <code>NO_PROXY=localhost,127.0.0.1</code> or authentication will fail.</p>"},{"location":"FAQ/#troubleshooting","title":"Troubleshooting","text":"# Test proxy connectivitycurl -v --proxy $HTTP_PROXY https://cloud.uipath.com*   Trying 192.168.1.100:8080...* Connected to proxy.company.com (192.168.1.100) port 8080\u2713 Connection successful# Test localhost exclusioncurl --proxy $HTTP_PROXY http://localhost:8080* Bypassing proxy for localhost\u2713 Direct connection to localhost successful"},{"location":"FAQ/#ssl-certificates","title":"SSL Certificates","text":"<p>The UiPath CLI automatically uses your system's certificate store (Windows Certificate Store, macOS Keychain, Linux ca-certificates). Corporate certificates installed via Group Policy or IT tools will be automatically recognized.</p>"},{"location":"FAQ/#troubleshooting-ssl-issues","title":"Troubleshooting SSL Issues","text":"<p>If you encounter SSL certificate errors:</p> <ol> <li>Disable SSL verification (for testing only):</li> </ol> Linux/macOS BashWindows PowerShellWindows CMD export UIPATH_DISABLE_SSL_VERIFY=trueuipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful. $env:UIPATH_DISABLE_SSL_VERIFY=\"true\"uipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful. set UIPATH_DISABLE_SSL_VERIFY=trueuipath auth\u280b Authenticating with UiPath ...\u2713  Authentication successful. <ol> <li>Use custom certificate bundle (if needed):</li> </ol> Linux/macOS BashWindows PowerShellWindows CMD export SSL_CERT_FILE=/path/to/company-ca-bundle.pemexport REQUESTS_CA_BUNDLE=/path/to/company-ca-bundle.pemuipath publish\u280b Publishing most recent package...\u2713  Package published successfully! $env:SSL_CERT_FILE=\"C:\\certs\\company-ca-bundle.pem\"$env:REQUESTS_CA_BUNDLE=\"C:\\certs\\company-ca-bundle.pem\"uipath publish\u280b Publishing most recent package...\u2713  Package published successfully! set SSL_CERT_FILE=C:\\certs\\company-ca-bundle.pemset REQUESTS_CA_BUNDLE=C:\\certs\\company-ca-bundle.pemuipath publish\u280b Publishing most recent package...\u2713  Package published successfully! <p>Note: This FAQ will be updated as new information becomes available. If you continue experiencing issues after following these solutions, please contact UiPath support.</p>"},{"location":"release_policy/","title":"Release Policy","text":"<p>The UiPath Python ecosystem is composed of different component packages:</p> <ul> <li><code>uipath</code>: The core SDK package (version &gt;= 2.0.0)</li> <li><code>uipath-langchain</code>: The LangChain integration package (version &gt;= 0.0.0)</li> </ul> <p>Both packages are under rapid development, following semantic versioning in the format of X.Y.Z:</p> <ul> <li>X (major version):<ul> <li><code>uipath</code>: X = 2</li> <li><code>uipath-langchain</code>: X = 0</li> </ul> </li> <li>Y (minor version) increases indicate breaking changes for public interfaces not marked as beta</li> <li>Z (patch version) increases indicate:<ul> <li>Bug fixes</li> <li>New features</li> <li>Changes to private interfaces</li> <li>Changes to beta features</li> </ul> </li> </ul>"},{"location":"release_policy/#version-number-format","title":"Version Number Format","text":"<p>The version format is <code>X.Y.Z</code> where:</p> <ul> <li>For <code>uipath</code>: X = 2 (e.g., 2.0.0, 2.1.0)</li> <li>For <code>uipath-langchain</code>: X = 0 (e.g., 0.0.0, 0.1.0)</li> <li>Y represents the minor version</li> <li>Z represents the patch version</li> </ul>"},{"location":"release_policy/#release-candidates","title":"Release Candidates","text":"<p>From time to time, we will version packages as release candidates. These are versions that are intended to be released as stable versions, but we want to get feedback from the community before doing so.</p> <p>Release candidates are versioned as <code>X.Y.ZrcN</code>. For example:</p> <ul> <li><code>uipath</code>: <code>2.2.0rc1</code></li> <li><code>uipath-langchain</code>: <code>0.1.0rc1</code></li> </ul> <p>If no issues are found, the release candidate will be released as a stable version with the same version number. If issues are found, we will release a new release candidate with an incremented N value (e.g., <code>2.2.0rc2</code> or <code>0.1.0rc2</code>).</p> <p>When upgrading between minor versions, users should review the list of breaking changes and deprecations.</p>"},{"location":"release_policy/#release-cadence","title":"Release Cadence","text":""},{"location":"release_policy/#minor-releases-xy0","title":"Minor Releases (X.Y.0)","text":"<ul> <li>Released as needed based on feature development and breaking changes</li> <li>Include breaking changes for public interfaces not marked as beta</li> <li>Require a migration guide for users</li> <li>Preceded by a release candidate (RC) phase</li> </ul>"},{"location":"release_policy/#patch-releases-xyz","title":"Patch Releases (X.Y.Z)","text":"<ul> <li>Released as needed based on bug fixes and improvements</li> <li>Include bug fixes, new features, and changes to private interfaces</li> <li>Always maintain backward compatibility for public interfaces</li> </ul>"},{"location":"release_policy/#api-stability","title":"API Stability","text":""},{"location":"release_policy/#public-api","title":"Public API","text":"<p>The following components are considered part of the public API:</p> <ul> <li>All classes and methods in the <code>src/uipath</code> directory</li> <li>CLI commands and their interfaces</li> </ul>"},{"location":"release_policy/#internal-api","title":"Internal API","text":"<p>Components marked as internal include:</p> <ul> <li>Methods and classes prefixed with <code>_</code></li> <li>Test utilities and fixtures</li> <li>Build and development tools</li> </ul>"},{"location":"release_policy/#breaking-changes","title":"Breaking Changes","text":"<p>Breaking changes are introduced in minor releases (X.Y.0) and follow these guidelines:</p> <ol> <li>Deprecation Period: Features marked for removal will be deprecated for at least one minor release cycle</li> <li>Migration Path: Breaking changes must provide a clear migration path</li> <li>Documentation: All breaking changes must be documented in the release notes and migration guide</li> <li>Beta Features: Breaking changes to beta features can occur in patch releases</li> </ol>"},{"location":"release_policy/#deprecation-policy","title":"Deprecation Policy","text":"<ol> <li>Announcement: Features to be deprecated will be announced in release notes</li> <li>Warning Period: Deprecated features will trigger warnings when used</li> <li>Removal: Deprecated features will be removed in the next major release</li> </ol>"},{"location":"release_policy/#release-process","title":"Release Process","text":"<ol> <li> <p>Development:</p> <ul> <li>Features and fixes are developed in feature branches</li> <li>All changes require tests and documentation</li> <li>Code must pass all CI checks</li> </ul> </li> <li> <p>Release Candidate:</p> <ul> <li>Minor releases include an RC phase</li> <li>RCs are versioned as <code>X.Y.ZrcN</code></li> <li>Community feedback is collected during RC phase</li> </ul> </li> <li> <p>Release:</p> <ul> <li>Version number is updated in <code>pyproject.toml</code></li> <li>Release notes are prepared</li> <li>Package is published to PyPI</li> <li>Documentation is updated</li> </ul> </li> </ol>"},{"location":"release_policy/#support-policy","title":"Support Policy","text":"<ul> <li>Current major version: Full support</li> <li>Previous major version: Security fixes only</li> <li>Older versions: No official support</li> </ul>"},{"location":"release_policy/#dependencies","title":"Dependencies","text":"<p>The SDK maintains compatibility with:</p> <ul> <li>Python 3.10+</li> <li>Key dependencies as specified in <code>pyproject.toml</code></li> <li>Regular updates to dependencies are performed in minor releases</li> </ul>"},{"location":"release_policy/#documentation","title":"Documentation","text":"<ul> <li>All public APIs must be documented</li> <li>Documentation follows Google-style docstrings</li> <li>Examples and usage guides are provided for new features</li> <li>Breaking changes are clearly documented in migration guides</li> </ul>"},{"location":"cli/","title":"CLI Reference","text":""},{"location":"cli/#auth","title":"auth","text":"<p>Authenticate with UiPath Cloud Platform.</p> <p>The domain for authentication is determined by the UIPATH_URL environment variable if set. Otherwise, it can be specified with --cloud (default), --staging, or --alpha flags.</p> <p>Interactive mode (default): Opens browser for OAuth authentication. Unattended mode: Use --client-id, --client-secret, --base-url and --scope for client credentials flow.</p> <p>Network options: - Set HTTP_PROXY/HTTPS_PROXY/NO_PROXY environment variables for proxy configuration - Set REQUESTS_CA_BUNDLE to specify a custom CA bundle for SSL verification - Set UIPATH_DISABLE_SSL_VERIFY to disable SSL verification (not recommended)</p> <p>Usage:</p> <pre><code>auth [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--cloud</code> text Use production environment <code>Sentinel.UNSET</code> <code>--staging</code> text Use staging environment <code>Sentinel.UNSET</code> <code>--alpha</code> text Use alpha environment <code>Sentinel.UNSET</code> <code>-f</code>, <code>--force</code> boolean Force new token <code>False</code> <code>--client-id</code> text Client ID for client credentials authentication (unattended mode) <code>Sentinel.UNSET</code> <code>--client-secret</code> text Client secret for client credentials authentication (unattended mode) <code>Sentinel.UNSET</code> <code>--base-url</code> text Base URL for the UiPath tenant instance (required for client credentials) <code>Sentinel.UNSET</code> <code>--tenant</code> text Tenant name within UiPath Automation Cloud <code>Sentinel.UNSET</code> <code>--scope</code> text Space-separated list of OAuth scopes to request (e.g., 'OR.Execution OR.Queues'). Defaults to 'OR.Execution' <code>OR.Execution</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>UiPath Automation Suite</p> <p>For UiPath Automation Suite deployments, you must set the <code>UIPATH_URL</code> environment variable to your dedicated instance URL before running this command.</p> <p>Example: <pre><code>UIPATH_URL=https://your-instance.com/account/tenant/orchestrator_/\n</code></pre></p> <p>You can set this environment variable either: - In a <code>.env</code> file in your project directory - As a system-wide environment variable</p> uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful."},{"location":"cli/#init","title":"init","text":"<p>Create uipath.json with input/output schemas and bindings.</p> <p>Usage:</p> <pre><code>init [OPTIONS] [ENTRYPOINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--infer-bindings</code> / <code>--no-infer-bindings</code> boolean Infer bindings from the script. <code>True</code> <code>--no-agents-md-override</code> boolean Won't override existing .agent files and AGENTS.md file. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Package requirements (bindings) are dependencies that are required by the automation package for successful execution.</p> <p>For more information about package requirements, see  the official documentation</p> <p>Warning</p> <p>The <code>uipath init</code> command executes your <code>main.py</code> file to analyze its structure and collect information about inputs and outputs.</p> uipath init\u280b Initializing UiPath project ...\u2713  Created 'uipath.json' file."},{"location":"cli/#run","title":"run","text":"<p>Execute the project.</p> <p>Usage:</p> <pre><code>run [OPTIONS] [ENTRYPOINT] [INPUT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--resume</code> boolean Resume execution from a previous state <code>False</code> <code>-f</code>, <code>--file</code> path File path for the .json input <code>Sentinel.UNSET</code> <code>--input-file</code> path Alias for '-f/--file' arguments <code>Sentinel.UNSET</code> <code>--output-file</code> path File path where the output will be written <code>Sentinel.UNSET</code> <code>--trace-file</code> path File path where the trace spans will be written (JSON Lines format) <code>Sentinel.UNSET</code> <code>--debug</code> boolean Enable debugging with debugpy. The process will wait for a debugger to attach. <code>False</code> <code>--debug-port</code> integer Port for the debug server (default: 5678) <code>5678</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Tip</p> <p>For step-by-step debugging with breakpoints and variable inspection (supported from <code>2.0.66</code> onward): <pre><code># Install debugpy package\n[uv] pip install debugpy\n# Run agent with debugging enabled\nuipath run [ENTRYPOINT] [INPUT] --debug\n</code></pre> For vscode: 1. add the debug configuration in your <code>.vscode/launch.json</code> file. 2. Place breakpoints in your code where needed. 3. Use the shortcut <code>F5</code>, or navigate to Run -&gt; Start Debugging -&gt; Python Debugger: Attach.</p> <p>Upon starting the debugging process, one should see the following logs in terminal: <pre><code>\ud83d\udc1b Debug server started on port 5678\n\ud83d\udccc Waiting for debugger to attach...\n  - VS Code: Run -&gt; Start Debugging -&gt; Python Debugger: Attach\n\u2713  Debugger attached successfully!\n</code></pre></p> <p>Warning</p> <p>Depending on the shell you are using, it may be necessary to escape the input json:</p> Bash/ZSHWindows CMDWindows PowerShell <pre><code>uipath run agent '{\"topic\": \"UiPath\"}'\n</code></pre> <pre><code>uipath run agent \"{\"\"topic\"\": \"\"UiPath\"\"}\"\n</code></pre> <pre><code>uipath run agent '{\\\"topic\\\":\\\"uipath\\\"}'\n</code></pre> uipath run main.py '{\"message\": \"test\"}'[2025-04-11 10:13:58,857][INFO] {'message': 'test'}"},{"location":"cli/#pack","title":"pack","text":"<p>Pack the project.</p> <p>Usage:</p> <pre><code>pack [OPTIONS] [ROOT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--nolock</code> boolean Skip running uv lock and exclude uv.lock from the package <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Packages your project into a <code>.nupkg</code> file that can be deployed to UiPath.</p> <p>Info</p> <p>Warning</p> <p>Your <code>pyproject.toml</code> must include:</p> <ul> <li>A description field (avoid characters: &amp;, &lt;, &gt;, \", ', ;)</li> <li>Author information</li> </ul> <p>Example:</p> <pre><code>description = \"Your package description\"\nauthors = [{name = \"Your Name\", email = \"your.email@example.com\"}]\n</code></pre> uipath pack\u280b Packaging project ...Name       : testVersion    : 0.1.0Description: Add your description hereAuthors    : Your Name\u2713  Project successfully packaged."},{"location":"cli/#default-files-included-in-nupkg","title":"Default Files Included in <code>.nupkg</code>","text":"<p>By default, the following file types are included in the <code>.nupkg</code> file:</p> <ul> <li><code>.py</code></li> <li><code>.mermaid</code></li> <li><code>.json</code></li> <li><code>.yaml</code></li> <li><code>.yml</code></li> </ul>"},{"location":"cli/#including-extra-files","title":"Including Extra Files","text":"<p>To include additional files, update the <code>uipath.json</code> file by adding a <code>settings</code> section. Use the following configuration format:</p> <pre><code>{\n    \"settings\": {\n        \"filesIncluded\": [\n            \"&lt;file here&gt;\"\n        ],\n        \"fileExtensionsIncluded\": [\n            \"&lt;new file extension to include (e.g., 'go')&gt;\"\n        ]\n    }\n}\n</code></pre>"},{"location":"cli/#publish","title":"publish","text":"<p>Publish the package.</p> <p>Usage:</p> <pre><code>publish [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--tenant</code>, <code>-t</code> text Whether to publish to the tenant package feed <code>Sentinel.UNSET</code> <code>--my-workspace</code>, <code>-w</code> text Whether to publish to the personal workspace <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Warning</p> <p>To properly use the CLI for packaging and publishing, your project should include:</p> <ul> <li>A <code>pyproject.toml</code> file with project metadata</li> <li>A <code>uipath.json</code> file (generated by <code>uipath init</code>)</li> <li>Any Python files needed for your automation</li> </ul> uipath publish\u280b Fetching available package feeds...\ud83d\udc47 Select package feed:  0: Orchestrator Tenant Processes Feed  1: Orchestrator Personal Workspace FeedSelect feed number: 0Selected feed: Orchestrator Tenant Processes Feed\u2838 Publishing most recent package: test.0.1.0.nupkg ...\u2713  Package published successfully!"},{"location":"cli/#deploy","title":"deploy","text":"<p>Pack and publish the project.</p> <p>Usage:</p> <pre><code>deploy [OPTIONS] [ROOT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--tenant</code>, <code>-t</code> text Whether to publish to the tenant package feed <code>Sentinel.UNSET</code> <code>--my-workspace</code>, <code>-w</code> text Whether to publish to the personal workspace <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#invoke","title":"invoke","text":"<p>Invoke an agent published in my workspace.</p> <p>Usage:</p> <pre><code>invoke [OPTIONS] [ENTRYPOINT] [INPUT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--file</code> path File path for the .json input <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code> uipath invoke agent '{\"topic\": \"UiPath\"}'\u2834 Loading configuration ...\u2834 Starting job ...\u2728 Job started successfully!\ud83d\udd17 Monitor your job here: [LINK]"},{"location":"core/actions/","title":"Actions","text":""},{"location":"core/actions/#uipath._services.actions_service.ActionsService","title":"ActionsService","text":"<p>Service for managing UiPath Actions.</p> <p>Actions are task-based automation components that can be integrated into applications and processes. They represent discrete units of work that can be triggered and monitored through the UiPath API.</p> <p>This service provides methods to create and retrieve actions, supporting both app-specific and generic actions. It inherits folder context management capabilities from FolderContext.</p> <p>Reference: https://docs.uipath.com/automation-cloud/docs/actions</p>"},{"location":"core/actions/#uipath._services.actions_service.ActionsService.create","title":"create","text":"<pre><code>create(\n    title,\n    data=None,\n    *,\n    app_name=None,\n    app_key=None,\n    app_folder_path=None,\n    app_folder_key=None,\n    app_version=1,\n    assignee=None,\n)\n</code></pre> <p>Creates a new action synchronously.</p> <p>This method creates a new action task in UiPath Orchestrator. The action can be either app-specific (using app_name or app_key) or a generic action.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the action</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing input data for the action</p> <code>None</code> <code>app_name</code> <code>Optional[str]</code> <p>The name of the application (if creating an app-specific action)</p> <code>None</code> <code>app_key</code> <code>Optional[str]</code> <p>The key of the application (if creating an app-specific action)</p> <code>None</code> <code>app_folder_path</code> <code>Optional[str]</code> <p>Optional folder path for the action</p> <code>None</code> <code>app_folder_key</code> <code>Optional[str]</code> <p>Optional folder key for the action</p> <code>None</code> <code>app_version</code> <code>Optional[int]</code> <p>The version of the application</p> <code>1</code> <code>assignee</code> <code>Optional[str]</code> <p>Optional username or email to assign the task to</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Action</code> <code>Action</code> <p>The created action object</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If neither app_name nor app_key is provided for app-specific actions</p>"},{"location":"core/actions/#uipath._services.actions_service.ActionsService.create_async","title":"create_async  <code>async</code>","text":"<pre><code>create_async(\n    title,\n    data=None,\n    *,\n    app_name=None,\n    app_key=None,\n    app_folder_path=None,\n    app_folder_key=None,\n    app_version=1,\n    assignee=None,\n)\n</code></pre> <p>Creates a new action asynchronously.</p> <p>This method creates a new action task in UiPath Orchestrator. The action can be either app-specific (using app_name or app_key) or a generic action.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the action</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing input data for the action</p> <code>None</code> <code>app_name</code> <code>Optional[str]</code> <p>The name of the application (if creating an app-specific action)</p> <code>None</code> <code>app_key</code> <code>Optional[str]</code> <p>The key of the application (if creating an app-specific action)</p> <code>None</code> <code>app_folder_path</code> <code>Optional[str]</code> <p>Optional folder path for the action</p> <code>None</code> <code>app_folder_key</code> <code>Optional[str]</code> <p>Optional folder key for the action</p> <code>None</code> <code>app_version</code> <code>Optional[int]</code> <p>The version of the application</p> <code>1</code> <code>assignee</code> <code>Optional[str]</code> <p>Optional username or email to assign the task to</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Action</code> <code>Action</code> <p>The created action object</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If neither app_name nor app_key is provided for app-specific actions</p>"},{"location":"core/actions/#uipath._services.actions_service.ActionsService.retrieve","title":"retrieve","text":"<pre><code>retrieve(action_key, app_folder_path='', app_folder_key='')\n</code></pre> <p>Retrieves an action by its key synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>action_key</code> <code>str</code> <p>The unique identifier of the action to retrieve</p> required <code>app_folder_path</code> <code>str</code> <p>Optional folder path for the action</p> <code>''</code> <code>app_folder_key</code> <code>str</code> <p>Optional folder key for the action</p> <code>''</code> <p>Returns:</p> Name Type Description <code>Action</code> <code>Action</code> <p>The retrieved action object</p>"},{"location":"core/actions/#uipath._services.actions_service.ActionsService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(\n    action_key, app_folder_path=\"\", app_folder_key=\"\"\n)\n</code></pre> <p>Retrieves an action by its key asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>action_key</code> <code>str</code> <p>The unique identifier of the action to retrieve</p> required <code>app_folder_path</code> <code>str</code> <p>Optional folder path for the action</p> <code>''</code> <code>app_folder_key</code> <code>str</code> <p>Optional folder key for the action</p> <code>''</code> <p>Returns:</p> Name Type Description <code>Action</code> <code>Action</code> <p>The retrieved action object</p>"},{"location":"core/assets/","title":"Assets","text":""},{"location":"core/assets/#uipath._services.assets_service.AssetsService","title":"AssetsService","text":"<p>Service for managing UiPath assets.</p> <p>Assets are key-value pairs that can be used to store configuration data, credentials, and other settings used by automation processes.</p>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.retrieve","title":"retrieve","text":"<pre><code>retrieve(name, *, folder_key=None, folder_path=None)\n</code></pre> <p>Retrieve an asset by its name.</p> <p>Related Activity: Get Asset</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the asset.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>UserAsset</code> <code>UserAsset | Asset</code> <p>The asset data.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\nclient.assets.retrieve(name=\"MyAsset\")\n</code></pre>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(name, *, folder_key=None, folder_path=None)\n</code></pre> <p>Asynchronously retrieve an asset by its name.</p> <p>Related Activity: Get Asset</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the asset.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>UserAsset</code> <code>UserAsset | Asset</code> <p>The asset data.</p>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.retrieve_credential","title":"retrieve_credential","text":"<pre><code>retrieve_credential(\n    name, *, folder_key=None, folder_path=None\n)\n</code></pre> <p>Gets a specified Orchestrator credential.</p> <p>The robot id is retrieved from the execution context (<code>UIPATH_ROBOT_KEY</code> environment variable)</p> <p>Related Activity: Get Credential</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the credential asset.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The decrypted credential password.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the method is called for a user asset.</p>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.retrieve_credential_async","title":"retrieve_credential_async  <code>async</code>","text":"<pre><code>retrieve_credential_async(\n    name, *, folder_key=None, folder_path=None\n)\n</code></pre> <p>Asynchronously gets a specified Orchestrator credential.</p> <p>The robot id is retrieved from the execution context (<code>UIPATH_ROBOT_KEY</code> environment variable)</p> <p>Related Activity: Get Credential</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the credential asset.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The decrypted credential password.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the method is called for a user asset.</p>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.update","title":"update","text":"<pre><code>update(robot_asset, *, folder_key=None, folder_path=None)\n</code></pre> <p>Update an asset's value.</p> <p>Related Activity: Set Asset</p> <p>Parameters:</p> Name Type Description Default <code>robot_asset</code> <code>UserAsset</code> <p>The asset object containing the updated values.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The HTTP response confirming the update.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the method is called for a user asset.</p>"},{"location":"core/assets/#uipath._services.assets_service.AssetsService.update_async","title":"update_async  <code>async</code>","text":"<pre><code>update_async(\n    robot_asset, *, folder_key=None, folder_path=None\n)\n</code></pre> <p>Asynchronously update an asset's value.</p> <p>Related Activity: Set Asset</p> <p>Parameters:</p> Name Type Description Default <code>robot_asset</code> <code>UserAsset</code> <p>The asset object containing the updated values.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The HTTP response confirming the update.</p>"},{"location":"core/attachments/","title":"Attachments","text":""},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService","title":"AttachmentsService","text":"<p>Service for managing UiPath attachments.</p> <p>Attachments allow you to upload and download files to be used within UiPath processes, actions, and other UiPath services.</p> <p>Reference: https://docs.uipath.com/orchestrator/reference/api-attachments</p>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.custom_headers","title":"custom_headers  <code>property</code>","text":"<pre><code>custom_headers\n</code></pre> <p>Return custom headers for API requests.</p>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.delete","title":"delete","text":"<pre><code>delete(*, key, folder_key=None, folder_path=None)\n</code></pre> <p>Delete an attachment.</p> <p>This method deletes an attachment from UiPath. If the attachment is not found in UiPath (404 error), it will check for a local file in the temporary directory that matches the UUID.</p> Note <p>The local file fallback functionality is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>UUID</code> <p>The key of the attachment to delete.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the deletion fails and no local file is found.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\nclient.attachments.delete(\n    key=uuid.UUID(\"123e4567-e89b-12d3-a456-426614174000\")\n)\nprint(\"Attachment deleted successfully\")\n</code></pre>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.delete_async","title":"delete_async  <code>async</code>","text":"<pre><code>delete_async(*, key, folder_key=None, folder_path=None)\n</code></pre> <p>Delete an attachment asynchronously.</p> <p>This method asynchronously deletes an attachment from UiPath. If the attachment is not found in UiPath (404 error), it will check for a local file in the temporary directory that matches the UUID.</p> Note <p>The local file fallback functionality is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>UUID</code> <p>The key of the attachment to delete.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the deletion fails and no local file is found.</p> <p>Examples:</p> <pre><code>import asyncio\nfrom uipath import UiPath\n\nclient = UiPath()\n\nasync def main():\n    await client.attachments.delete_async(\n        key=uuid.UUID(\"123e4567-e89b-12d3-a456-426614174000\")\n    )\n    print(\"Attachment deleted successfully\")\n</code></pre>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.download","title":"download","text":"<pre><code>download(\n    *,\n    key,\n    destination_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Download an attachment.</p> <p>This method downloads an attachment from UiPath to a local file. If the attachment is not found in UiPath (404 error), it will check for a local file in the temporary directory that matches the UUID.</p> Note <p>The local file fallback functionality is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>UUID</code> <p>The key of the attachment to download.</p> required <code>destination_path</code> <code>str</code> <p>The local path where the attachment will be saved.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the downloaded attachment.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the download fails and no local file is found.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\nattachment_name = client.attachments.download(\n    key=uuid.UUID(\"123e4567-e89b-12d3-a456-426614174000\"),\n    destination_path=\"path/to/save/document.pdf\"\n)\nprint(f\"Downloaded attachment: {attachment_name}\")\n</code></pre>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.download_async","title":"download_async  <code>async</code>","text":"<pre><code>download_async(\n    *,\n    key,\n    destination_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Download an attachment asynchronously.</p> <p>This method asynchronously downloads an attachment from UiPath to a local file. If the attachment is not found in UiPath (404 error), it will check for a local file in the temporary directory that matches the UUID.</p> Note <p>The local file fallback functionality is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>UUID</code> <p>The key of the attachment to download.</p> required <code>destination_path</code> <code>str</code> <p>The local path where the attachment will be saved.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the downloaded attachment.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the download fails and no local file is found.</p> <p>Examples:</p> <pre><code>import asyncio\nfrom uipath import UiPath\n\nclient = UiPath()\n\nasync def main():\n    attachment_name = await client.attachments.download_async(\n        key=uuid.UUID(\"123e4567-e89b-12d3-a456-426614174000\"),\n        destination_path=\"path/to/save/document.pdf\"\n    )\n    print(f\"Downloaded attachment: {attachment_name}\")\n</code></pre>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.upload","title":"upload","text":"<pre><code>upload(\n    *,\n    name,\n    content=None,\n    source_path=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Upload a file or content to UiPath as an attachment.</p> <p>This method uploads content to UiPath and makes it available as an attachment. You can either provide a file path or content in memory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the attachment file.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>UUID</code> <p>uuid.UUID: The UUID of the created attachment.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p> <code>Exception</code> <p>If the upload fails.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\n# Upload a file from disk\nattachment_key = client.attachments.upload(\n    name=\"my-document.pdf\",\n    source_path=\"path/to/local/document.pdf\",\n)\nprint(f\"Uploaded attachment with key: {attachment_key}\")\n\n# Upload content from memory\nattachment_key = client.attachments.upload(\n    name=\"notes.txt\",\n    content=\"This is a text file content\",\n)\nprint(f\"Uploaded attachment with key: {attachment_key}\")\n</code></pre>"},{"location":"core/attachments/#uipath._services.attachments_service.AttachmentsService.upload_async","title":"upload_async  <code>async</code>","text":"<pre><code>upload_async(\n    *,\n    name,\n    content=None,\n    source_path=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Upload a file or content to UiPath as an attachment asynchronously.</p> <p>This method asynchronously uploads content to UiPath and makes it available as an attachment. You can either provide a file path or content in memory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the attachment file.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>UUID</code> <p>uuid.UUID: The UUID of the created attachment.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p> <code>Exception</code> <p>If the upload fails.</p> <p>Examples:</p> <pre><code>import asyncio\nfrom uipath import UiPath\n\nclient = UiPath()\n\nasync def main():\n    # Upload a file from disk\n    attachment_key = await client.attachments.upload_async(\n        name=\"my-document.pdf\",\n        source_path=\"path/to/local/document.pdf\",\n    )\n    print(f\"Uploaded attachment with key: {attachment_key}\")\n\n    # Upload content from memory\n    attachment_key = await client.attachments.upload_async(\n        name=\"notes.txt\",\n        content=\"This is a text file content\",\n    )\n    print(f\"Uploaded attachment with key: {attachment_key}\")\n</code></pre>"},{"location":"core/buckets/","title":"Buckets","text":""},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService","title":"BucketsService","text":"<p>Service for managing UiPath storage buckets.</p> <p>Buckets are cloud storage containers that can be used to store and manage files used by automation processes.</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.create","title":"create","text":"<pre><code>create(\n    name,\n    *,\n    description=None,\n    identifier=None,\n    folder_path=None,\n    folder_key=None,\n)\n</code></pre> <p>Create a new bucket.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Bucket name (must be unique within folder)</p> required <code>description</code> <code>Optional[str]</code> <p>Optional description</p> <code>None</code> <code>identifier</code> <code>Optional[str]</code> <p>UUID identifier (auto-generated if not provided)</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder to create bucket in</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Bucket</code> <code>Bucket</code> <p>Newly created bucket resource</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If bucket creation fails</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bucket = sdk.buckets.create(\"my-storage\")\n&gt;&gt;&gt; bucket = sdk.buckets.create(\n...     \"data-storage\",\n...     description=\"Production data\"\n... )\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.create_async","title":"create_async  <code>async</code>","text":"<pre><code>create_async(\n    name,\n    *,\n    description=None,\n    identifier=None,\n    folder_path=None,\n    folder_key=None,\n)\n</code></pre> <p>Async version of create().</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.delete","title":"delete","text":"<pre><code>delete(\n    *,\n    name=None,\n    key=None,\n    folder_path=None,\n    folder_key=None,\n)\n</code></pre> <p>Delete a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier (UUID)</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <p>Raises:</p> Type Description <code>LookupError</code> <p>If bucket is not found</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sdk.buckets.delete(name=\"old-storage\")\n&gt;&gt;&gt; sdk.buckets.delete(key=\"abc-123-def\")\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.delete_async","title":"delete_async  <code>async</code>","text":"<pre><code>delete_async(\n    *,\n    name=None,\n    key=None,\n    folder_path=None,\n    folder_key=None,\n)\n</code></pre> <p>Async version of delete().</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.delete_file","title":"delete_file","text":"<pre><code>delete_file(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Delete a file from a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>Path to the file in the bucket</p> required <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sdk.buckets.delete_file(name=\"my-storage\", blob_file_path=\"data/file.txt\")\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.delete_file_async","title":"delete_file_async  <code>async</code>","text":"<pre><code>delete_file_async(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Delete a file from a bucket asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>Path to the file in the bucket</p> required <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; await sdk.buckets.delete_file_async(name=\"my-storage\", blob_file_path=\"data/file.txt\")\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.download","title":"download","text":"<pre><code>download(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    destination_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Download a file from a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the bucket.</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path to the file in the bucket.</p> required <code>destination_path</code> <code>str</code> <p>The local path where the file will be saved.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither key nor name is provided.</p> <code>Exception</code> <p>If the bucket with the specified key is not found.</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.download_async","title":"download_async  <code>async</code>","text":"<pre><code>download_async(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    destination_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Download a file from a bucket asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the bucket.</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path to the file in the bucket.</p> required <code>destination_path</code> <code>str</code> <p>The local path where the file will be saved.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither key nor name is provided.</p> <code>Exception</code> <p>If the bucket with the specified key is not found.</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.exists","title":"exists","text":"<pre><code>exists(name, *, folder_key=None, folder_path=None)\n</code></pre> <p>Check if bucket exists.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Bucket name</p> required <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if bucket exists</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; if sdk.buckets.exists(\"my-storage\"):\n...     print(\"Bucket found\")\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.exists_async","title":"exists_async  <code>async</code>","text":"<pre><code>exists_async(name, *, folder_key=None, folder_path=None)\n</code></pre> <p>Async version of exists().</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.exists_file","title":"exists_file","text":"<pre><code>exists_file(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Check if a file exists in a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>Path to the file in the bucket (cannot be empty)</p> required <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if file exists, False otherwise</p> Note <p>This method uses short-circuit iteration to stop at the first match, making it memory-efficient even for large buckets. It will raise LookupError if the bucket itself doesn't exist.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If blob_file_path is empty or whitespace-only</p> <code>LookupError</code> <p>If bucket is not found</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; if sdk.buckets.exists_file(name=\"my-storage\", blob_file_path=\"data/file.csv\"):\n...     print(\"File exists\")\n&gt;&gt;&gt; # Check in specific folder\n&gt;&gt;&gt; exists = sdk.buckets.exists_file(\n...     name=\"my-storage\",\n...     blob_file_path=\"reports/2024/summary.pdf\",\n...     folder_path=\"Production\"\n... )\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.exists_file_async","title":"exists_file_async  <code>async</code>","text":"<pre><code>exists_file_async(\n    *,\n    name=None,\n    key=None,\n    blob_file_path,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Async version of exists_file().</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>Path to the file in the bucket (cannot be empty)</p> required <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if file exists, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If blob_file_path is empty or whitespace-only</p> <code>LookupError</code> <p>If bucket is not found</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; if await sdk.buckets.exists_file_async(name=\"my-storage\", blob_file_path=\"data/file.csv\"):\n...     print(\"File exists\")\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.get_files","title":"get_files","text":"<pre><code>get_files(\n    *,\n    name=None,\n    key=None,\n    prefix=\"\",\n    recursive=False,\n    file_name_glob=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Get files using OData GetFiles API (Studio-compatible).</p> <p>This method uses the GetFiles API which is used by UiPath Studio activities. Use this when you need: - Recursive directory traversal - Glob pattern filtering (e.g., \"*.pdf\") - Compatibility with Studio activity behavior</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Directory path to filter files (default: root)</p> <code>''</code> <code>recursive</code> <code>bool</code> <p>Recurse subdirectories for flat view (default: False)</p> <code>False</code> <code>file_name_glob</code> <code>Optional[str]</code> <p>File filter pattern (e.g., \".pdf\", \"data_.csv\")</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[BucketFile]</code> <p>Iterator[BucketFile]: Iterator of files matching criteria</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither name nor key is provided</p> <code>LookupError</code> <p>If bucket not found</p> <code>Exception</code> <p>For API errors or invalid responses</p> Note <p>For large buckets with 10,000+ files, consider using list_files() which uses more efficient cursor-based pagination.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Get all PDF files recursively\n&gt;&gt;&gt; for file in sdk.buckets.get_files(\n...     name=\"my-storage\",\n...     recursive=True,\n...     file_name_glob=\"*.pdf\"\n... ):\n...     print(f\"{file.path} - {file.size} bytes\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get files in specific directory\n&gt;&gt;&gt; files = list(sdk.buckets.get_files(\n...     name=\"my-storage\",\n...     prefix=\"reports/\"\n... ))\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.get_files_async","title":"get_files_async  <code>async</code>","text":"<pre><code>get_files_async(\n    *,\n    name=None,\n    key=None,\n    prefix=\"\",\n    recursive=False,\n    file_name_glob=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Async version of get_files().</p> <p>See get_files() for detailed documentation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async for file in sdk.buckets.get_files_async(\n...     name=\"my-storage\",\n...     recursive=True,\n...     file_name_glob=\"*.pdf\"\n... ):\n...     print(file.path)\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.list","title":"list","text":"<pre><code>list(*, folder_path=None, folder_key=None, name=None)\n</code></pre> <p>List buckets with auto-pagination.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>Optional[str]</code> <p>Folder path to filter buckets</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key (mutually exclusive with folder_path)</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Filter by bucket name (contains match)</p> <code>None</code> <p>Yields:</p> Name Type Description <code>Bucket</code> <code>Bucket</code> <p>Bucket resource instances</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # List all buckets\n&gt;&gt;&gt; for bucket in sdk.buckets.list():\n...     print(bucket.name)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Filter by folder\n&gt;&gt;&gt; for bucket in sdk.buckets.list(folder_path=\"Production\"):\n...     print(bucket.name)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Filter by name\n&gt;&gt;&gt; for bucket in sdk.buckets.list(name=\"invoice\"):\n...     print(bucket.name)\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.list_async","title":"list_async  <code>async</code>","text":"<pre><code>list_async(*, folder_path=None, folder_key=None, name=None)\n</code></pre> <p>Async version of list() with auto-pagination.</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.list_files","title":"list_files","text":"<pre><code>list_files(\n    *,\n    name=None,\n    key=None,\n    prefix=\"\",\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>List files in a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Filter files by prefix</p> <code>''</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[BucketFile]</code> <p>Iterator[BucketFile]: Iterator of files in the bucket</p> Note <p>Returns an iterator for memory efficiency. Use list() to materialize all results: files = list(sdk.buckets.list_files(name=\"my-storage\"))</p> <p>This method automatically handles pagination, fetching up to 500 files per request.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; for file in sdk.buckets.list_files(name=\"my-storage\"):\n...     print(file.path)\n&gt;&gt;&gt; files = list(sdk.buckets.list_files(name=\"my-storage\", prefix=\"data/\"))\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.list_files_async","title":"list_files_async  <code>async</code>","text":"<pre><code>list_files_async(\n    *,\n    name=None,\n    key=None,\n    prefix=\"\",\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>List files in a bucket asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Bucket name</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Bucket identifier</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Filter files by prefix</p> <code>''</code> <code>folder_key</code> <code>Optional[str]</code> <p>Folder key</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Folder path</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncIterator[BucketFile]</code> <p>AsyncIterator[BucketFile]: Async iterator of files in the bucket</p> Note <p>Returns an async iterator for memory efficiency. Use list comprehension to materialize: files = [f async for f in sdk.buckets.list_files_async(name=\"my-storage\")]</p> <p>This method automatically handles pagination, fetching up to 500 files per request.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async for file in sdk.buckets.list_files_async(name=\"my-storage\"):\n...     print(file.path)\n&gt;&gt;&gt; files = [f async for f in sdk.buckets.list_files_async(name=\"my-storage\", prefix=\"data/\")]\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.retrieve","title":"retrieve","text":"<pre><code>retrieve(\n    *,\n    name=None,\n    key=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Retrieve bucket information by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>The name of the bucket to retrieve.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Bucket</code> <code>Bucket</code> <p>The bucket resource instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither bucket key nor bucket name is provided.</p> <code>Exception</code> <p>If the bucket with the specified name is not found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bucket = sdk.buckets.retrieve(name=\"my-storage\")\n&gt;&gt;&gt; print(bucket.name, bucket.identifier)\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(\n    *,\n    name=None,\n    key=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Asynchronously retrieve bucket information by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>The name of the bucket to retrieve.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Bucket</code> <code>Bucket</code> <p>The bucket resource instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither bucket key nor bucket name is provided.</p> <code>Exception</code> <p>If the bucket with the specified name is not found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bucket = await sdk.buckets.retrieve_async(name=\"my-storage\")\n&gt;&gt;&gt; print(bucket.name, bucket.identifier)\n</code></pre>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.upload","title":"upload","text":"<pre><code>upload(\n    *,\n    key=None,\n    name=None,\n    blob_file_path,\n    content_type=None,\n    source_path=None,\n    content=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Upload a file to a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the bucket.</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path where the file will be stored in the bucket.</p> required <code>content_type</code> <code>Optional[str]</code> <p>The MIME type of the file. For file inputs this is computed dynamically. Default is \"application/octet-stream\".</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither key nor name is provided.</p> <code>Exception</code> <p>If the bucket with the specified key or name is not found.</p>"},{"location":"core/buckets/#uipath._services.buckets_service.BucketsService.upload_async","title":"upload_async  <code>async</code>","text":"<pre><code>upload_async(\n    *,\n    key=None,\n    name=None,\n    blob_file_path,\n    content_type=None,\n    source_path=None,\n    content=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Upload a file to a bucket asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>The key of the bucket.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the bucket.</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path where the file will be stored in the bucket.</p> required <code>content_type</code> <code>Optional[str]</code> <p>The MIME type of the file. For file inputs this is computed dynamically. Default is \"application/octet-stream\".</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the bucket resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the bucket resides.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither key nor name is provided.</p> <code>Exception</code> <p>If the bucket with the specified key or name is not found.</p>"},{"location":"core/connections/","title":"Connections","text":""},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService","title":"ConnectionsService","text":"<p>Service for managing UiPath external service connections.</p> <p>This service provides methods to retrieve direct connection information retrieval and secure token management.</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.list","title":"list","text":"<pre><code>list(\n    *,\n    name=None,\n    folder_path=None,\n    folder_key=None,\n    connector_key=None,\n    skip=None,\n    top=None,\n)\n</code></pre> <p>Lists all connections with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Optional connection name to filter (supports partial matching)</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Optional folder path for filtering connections</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Optional folder key (mutually exclusive with folder_path)</p> <code>None</code> <code>connector_key</code> <code>Optional[str]</code> <p>Optional connector key to filter by specific connector type</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of records to skip (for pagination)</p> <code>None</code> <code>top</code> <code>Optional[int]</code> <p>Maximum number of records to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Connection]</code> <p>List[Connection]: List of connection instances</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both folder_path and folder_key are provided together, or if folder_path is provided but cannot be resolved to a folder_key</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # List all connections\n&gt;&gt;&gt; connections = sdk.connections.list()\n</code></pre> <pre><code>&gt;&gt;&gt; # Find connections by name\n&gt;&gt;&gt; salesforce_conns = sdk.connections.list(name=\"Salesforce\")\n</code></pre> <pre><code>&gt;&gt;&gt; # List all Slack connections in Finance folder\n&gt;&gt;&gt; connections = sdk.connections.list(\n...     folder_path=\"Finance\",\n...     connector_key=\"uipath-slack\"\n... )\n</code></pre>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.list_async","title":"list_async  <code>async</code>","text":"<pre><code>list_async(\n    *,\n    name=None,\n    folder_path=None,\n    folder_key=None,\n    connector_key=None,\n    skip=None,\n    top=None,\n)\n</code></pre> <p>Asynchronously lists all connections with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Optional connection name to filter (supports partial matching)</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>Optional folder path for filtering connections</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>Optional folder key (mutually exclusive with folder_path)</p> <code>None</code> <code>connector_key</code> <code>Optional[str]</code> <p>Optional connector key to filter by specific connector type</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of records to skip (for pagination)</p> <code>None</code> <code>top</code> <code>Optional[int]</code> <p>Maximum number of records to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Connection]</code> <p>List[Connection]: List of connection instances</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both folder_path and folder_key are provided together, or if folder_path is provided but cannot be resolved to a folder_key</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # List all connections\n&gt;&gt;&gt; connections = await sdk.connections.list_async()\n</code></pre> <pre><code>&gt;&gt;&gt; # Find connections by name\n&gt;&gt;&gt; salesforce_conns = await sdk.connections.list_async(name=\"Salesforce\")\n</code></pre> <pre><code>&gt;&gt;&gt; # List all Slack connections in Finance folder\n&gt;&gt;&gt; connections = await sdk.connections.list_async(\n...     folder_path=\"Finance\",\n...     connector_key=\"uipath-slack\"\n... )\n</code></pre>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.metadata","title":"metadata","text":"<pre><code>metadata(\n    element_instance_id,\n    connector_key,\n    tool_path,\n    parameters=None,\n    schema_mode=True,\n    max_jit_depth=5,\n)\n</code></pre> <p>Synchronously retrieve connection API metadata.</p> <p>This method fetches the metadata for a connection. When parameters are provided, it automatically fetches JIT (Just-In-Time) metadata for cascading fields in a loop, following action URLs up to a maximum depth.</p> <p>Parameters:</p> Name Type Description Default <code>element_instance_id</code> <code>int</code> <p>The element instance ID of the connection.</p> required <code>connector_key</code> <code>str</code> <p>The connector key (e.g., 'uipath-atlassian-jira', 'uipath-slack').</p> required <code>tool_path</code> <code>str</code> <p>The tool path to retrieve metadata for.</p> required <code>parameters</code> <code>Optional[Dict[str, str]]</code> <p>Parameter values. When provided, triggers automatic JIT fetching for cascading fields.</p> <code>None</code> <code>schema_mode</code> <code>bool</code> <p>Whether or not to represent the output schema in the response fields.</p> <code>True</code> <code>max_jit_depth</code> <code>int</code> <p>The maximum depth of the JIT resolution loop.</p> <code>5</code> <p>Returns:</p> Name Type Description <code>ConnectionMetadata</code> <code>ConnectionMetadata</code> <p>The connection metadata.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; metadata = sdk.connections.metadata(\n...     element_instance_id=123,\n...     connector_key=\"uipath-atlassian-jira\",\n...     tool_path=\"Issue\",\n...     parameters={\"projectId\": \"PROJ-123\"}  # Optional\n... )\n</code></pre>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.metadata_async","title":"metadata_async  <code>async</code>","text":"<pre><code>metadata_async(\n    element_instance_id,\n    connector_key,\n    tool_path,\n    parameters=None,\n    schema_mode=True,\n    max_jit_depth=5,\n)\n</code></pre> <p>Asynchronously retrieve connection API metadata.</p> <p>This method fetches the metadata for a connection. When parameters are provided, it automatically fetches JIT (Just-In-Time) metadata for cascading fields in a loop, following action URLs up to a maximum depth.</p> <p>Parameters:</p> Name Type Description Default <code>element_instance_id</code> <code>int</code> <p>The element instance ID of the connection.</p> required <code>connector_key</code> <code>str</code> <p>The connector key (e.g., 'uipath-atlassian-jira', 'uipath-slack').</p> required <code>tool_path</code> <code>str</code> <p>The tool path to retrieve metadata for.</p> required <code>parameters</code> <code>Optional[Dict[str, str]]</code> <p>Parameter values. When provided, triggers automatic JIT fetching for cascading fields.</p> <code>None</code> <code>schema_mode</code> <code>bool</code> <p>Whether or not to represent the output schema in the response fields.</p> <code>True</code> <code>max_jit_depth</code> <code>int</code> <p>The maximum depth of the JIT resolution loop.</p> <code>5</code> <p>Returns:</p> Name Type Description <code>ConnectionMetadata</code> <code>ConnectionMetadata</code> <p>The connection metadata.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; metadata = await sdk.connections.metadata_async(\n...     element_instance_id=123,\n...     connector_key=\"uipath-atlassian-jira\",\n...     tool_path=\"Issue\",\n...     parameters={\"projectId\": \"PROJ-123\"}  # Optional\n... )\n</code></pre>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve","title":"retrieve","text":"<pre><code>retrieve(key)\n</code></pre> <p>Retrieve connection details by its key.</p> <p>This method fetches the configuration and metadata for a connection, which can be used to establish communication with an external service.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The unique identifier of the connection to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Connection</code> <code>Connection</code> <p>The connection details, including configuration parameters and authentication information.</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(key)\n</code></pre> <p>Asynchronously retrieve connection details by its key.</p> <p>This method fetches the configuration and metadata for a connection, which can be used to establish communication with an external service.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The unique identifier of the connection to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Connection</code> <code>Connection</code> <p>The connection details, including configuration parameters and authentication information.</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve_event_payload","title":"retrieve_event_payload","text":"<pre><code>retrieve_event_payload(event_args)\n</code></pre> <p>Retrieve event payload from UiPath Integration Service.</p> <p>Parameters:</p> Name Type Description Default <code>event_args</code> <code>EventArguments</code> <p>The event arguments. Should be passed along from the job's input.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The event payload data</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve_event_payload_async","title":"retrieve_event_payload_async  <code>async</code>","text":"<pre><code>retrieve_event_payload_async(event_args)\n</code></pre> <p>Retrieve event payload from UiPath Integration Service.</p> <p>Parameters:</p> Name Type Description Default <code>event_args</code> <code>EventArguments</code> <p>The event arguments. Should be passed along from the job's input.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The event payload data</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve_token","title":"retrieve_token","text":"<pre><code>retrieve_token(key, token_type=ConnectionTokenType.DIRECT)\n</code></pre> <p>Retrieve an authentication token for a connection.</p> <p>This method obtains a fresh authentication token that can be used to communicate with the external service. This is particularly useful for services that use token-based authentication.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>token_type</code> <code>ConnectionTokenType</code> <p>The token type to use.</p> <code>DIRECT</code> <p>Returns:</p> Name Type Description <code>ConnectionToken</code> <code>ConnectionToken</code> <p>The authentication token details, including the token value and any associated metadata.</p>"},{"location":"core/connections/#uipath._services.connections_service.ConnectionsService.retrieve_token_async","title":"retrieve_token_async  <code>async</code>","text":"<pre><code>retrieve_token_async(\n    key, token_type=ConnectionTokenType.DIRECT\n)\n</code></pre> <p>Asynchronously retrieve an authentication token for a connection.</p> <p>This method obtains a fresh authentication token that can be used to communicate with the external service. This is particularly useful for services that use token-based authentication.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>token_type</code> <code>ConnectionTokenType</code> <p>The token type to use.</p> <code>DIRECT</code> <p>Returns:</p> Name Type Description <code>ConnectionToken</code> <code>ConnectionToken</code> <p>The authentication token details, including the token value and any associated metadata.</p>"},{"location":"core/context_grounding/","title":"Context Grounding","text":""},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService","title":"ContextGroundingService","text":"<p>Service for managing semantic automation contexts in UiPath.</p> <p>Context Grounding is a feature that helps in understanding and managing the semantic context in which automation processes operate. It provides capabilities for indexing, retrieving, and searching through contextual information that can be used to enhance AI-enabled automation.</p> <p>This service requires a valid folder key to be set in the environment, as context grounding operations are always performed within a specific folder context.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.add_to_index","title":"add_to_index","text":"<pre><code>add_to_index(\n    name,\n    blob_file_path,\n    content_type=None,\n    content=None,\n    source_path=None,\n    folder_key=None,\n    folder_path=None,\n    ingest_data=True,\n)\n</code></pre> <p>Add content to the index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the index to add content to.</p> required <code>content_type</code> <code>Optional[str]</code> <p>The MIME type of the file. For file inputs this is computed dynamically. Default is \"application/octet-stream\".</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path where the blob will be stored in the storage bucket.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to be added, either as a string or bytes.</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The source path of the content if it is being uploaded from a file.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <code>ingest_data</code> <code>bool</code> <p>Whether to ingest data in the index after content is uploaded. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.add_to_index_async","title":"add_to_index_async  <code>async</code>","text":"<pre><code>add_to_index_async(\n    name,\n    blob_file_path,\n    content_type=None,\n    content=None,\n    source_path=None,\n    folder_key=None,\n    folder_path=None,\n    ingest_data=True,\n)\n</code></pre> <p>Asynchronously add content to the index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the index to add content to.</p> required <code>content_type</code> <code>Optional[str]</code> <p>The MIME type of the file. For file inputs this is computed dynamically. Default is \"application/octet-stream\".</p> <code>None</code> <code>blob_file_path</code> <code>str</code> <p>The path where the blob will be stored in the storage bucket.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to be added, either as a string or bytes.</p> <code>None</code> <code>source_path</code> <code>Optional[str]</code> <p>The source path of the content if it is being uploaded from a file.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <code>ingest_data</code> <code>bool</code> <p>Whether to ingest data in the index after content is uploaded. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.create_index","title":"create_index","text":"<pre><code>create_index(\n    name,\n    source,\n    description=None,\n    cron_expression=None,\n    time_zone_id=None,\n    advanced_ingestion=True,\n    preprocessing_request=LLMV4,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Create a new context grounding index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the index to create.</p> required <code>source</code> <code>dict</code> <p>Source configuration dictionary: - For buckets: type=\"bucket\", bucket_name, folder_path, directory_path=\"/\" (optional), file_type (optional) - For Google Drive: type=\"google\", connection_name, connection_id, leaf_folder_id, directory_path, folder_path, file_type (optional) - For Dropbox: type=\"dropbox\", connection_name, connection_id, directory_path, folder_path, file_type (optional) - For OneDrive: type=\"onedrive\", connection_name, connection_id, leaf_folder_id, directory_path, folder_path, file_type (optional) - For Confluence: type=\"confluence\", connection_name, connection_id, space_id, directory_path, folder_path, file_type (optional)</p> required <code>description</code> <code>Optional[str]</code> <p>Description of the index.</p> <code>None</code> <code>cron_expression</code> <code>Optional[str]</code> <p>Cron expression for scheduled indexing (e.g., \"0 0 18 ? * 2\" for Tuesdays at 6 PM).</p> <code>None</code> <code>time_zone_id</code> <code>Optional[str]</code> <p>Valid Windows Timezone ID for the cron expression (e.g., \"UTC\", \"Pacific Standard Time\", \"GTB Standard Time\").</p> <code>None</code> <code>advanced_ingestion</code> <code>Optional[bool]</code> <p>Enable advanced ingestion with preprocessing. Defaults to True.</p> <code>True</code> <code>preprocessing_request</code> <code>Optional[str]</code> <p>The OData type for preprocessing request. Defaults to LLMV4.</p> <code>LLMV4</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index will be created.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index will be created.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ContextGroundingIndex</code> <code>ContextGroundingIndex</code> <p>The created index information.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.create_index_async","title":"create_index_async  <code>async</code>","text":"<pre><code>create_index_async(\n    name,\n    source,\n    description=None,\n    cron_expression=None,\n    time_zone_id=None,\n    advanced_ingestion=True,\n    preprocessing_request=LLMV4,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Create a new context grounding index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the index to create.</p> required <code>source</code> <code>dict</code> <p>Source configuration dictionary: - For buckets: type=\"bucket\", bucket_name, folder_path, directory_path=\"/\" (optional), file_type (optional) - For Google Drive: type=\"google_drive\", connection_name, connection_id, leaf_folder_id, directory_path, folder_path, file_type (optional) - For Dropbox: type=\"dropbox\", connection_name, connection_id, directory_path, folder_path, file_type (optional) - For OneDrive: type=\"onedrive\", connection_name, connection_id, leaf_folder_id, directory_path, folder_path, file_type (optional) - For Confluence: type=\"confluence\", connection_name, connection_id, space_id, directory_path, folder_path, file_type (optional)</p> required <code>description</code> <code>Optional[str]</code> <p>Description of the index.</p> <code>None</code> <code>cron_expression</code> <code>Optional[str]</code> <p>Cron expression for scheduled indexing (e.g., \"0 0 18 ? * 2\" for Tuesdays at 6 PM).</p> <code>None</code> <code>time_zone_id</code> <code>Optional[str]</code> <p>Valid Windows Timezone ID for the cron expression (e.g., \"UTC\", \"Pacific Standard Time\", \"GTB Standard Time\").</p> <code>None</code> <code>advanced_ingestion</code> <code>Optional[bool]</code> <p>Enable advanced ingestion with preprocessing. Defaults to True.</p> <code>True</code> <code>preprocessing_request</code> <code>Optional[str]</code> <p>The OData type for preprocessing request. Defaults to LLMV4.</p> <code>LLMV4</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index will be created.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index will be created.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ContextGroundingIndex</code> <code>ContextGroundingIndex</code> <p>The created index information.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.delete_index","title":"delete_index","text":"<pre><code>delete_index(index, folder_key=None, folder_path=None)\n</code></pre> <p>Delete a context grounding index.</p> <p>This method removes the specified context grounding index from Orchestrator.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>ContextGroundingIndex</code> <p>The context grounding index to delete.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.delete_index_async","title":"delete_index_async  <code>async</code>","text":"<pre><code>delete_index_async(\n    index, folder_key=None, folder_path=None\n)\n</code></pre> <p>Asynchronously delete a context grounding index.</p> <p>This method removes the specified context grounding index from Orchestrator.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>ContextGroundingIndex</code> <p>The context grounding index to delete.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.ingest_data","title":"ingest_data","text":"<pre><code>ingest_data(index, folder_key=None, folder_path=None)\n</code></pre> <p>Ingest data into the context grounding index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>ContextGroundingIndex</code> <p>The context grounding index to perform data ingestion.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.ingest_data_async","title":"ingest_data_async  <code>async</code>","text":"<pre><code>ingest_data_async(index, folder_key=None, folder_path=None)\n</code></pre> <p>Asynchronously ingest data into the context grounding index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>ContextGroundingIndex</code> <p>The context grounding index to perform data ingestion.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.retrieve","title":"retrieve","text":"<pre><code>retrieve(name, folder_key=None, folder_path=None)\n</code></pre> <p>Retrieve context grounding index information by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the context index to retrieve.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ContextGroundingIndex</code> <code>ContextGroundingIndex</code> <p>The index information, including its configuration and metadata if found.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no index with the given name is found.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(name, folder_key=None, folder_path=None)\n</code></pre> <p>Asynchronously retrieve context grounding index information by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the context index to retrieve.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ContextGroundingIndex</code> <code>ContextGroundingIndex</code> <p>The index information, including its configuration and metadata if found.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no index with the given name is found.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.retrieve_by_id","title":"retrieve_by_id","text":"<pre><code>retrieve_by_id(id, folder_key=None, folder_path=None)\n</code></pre> <p>Retrieve context grounding index information by its ID.</p> <p>This method provides direct access to a context index using its unique identifier, which can be more efficient than searching by name.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of the context index.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The index information, including its configuration and metadata.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.retrieve_by_id_async","title":"retrieve_by_id_async  <code>async</code>","text":"<pre><code>retrieve_by_id_async(id, folder_key=None, folder_path=None)\n</code></pre> <p>Retrieve asynchronously context grounding index information by its ID.</p> <p>This method provides direct access to a context index using its unique identifier, which can be more efficient than searching by name.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of the context index.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder where the index resides.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder where the index resides.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The index information, including its configuration and metadata.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.search","title":"search","text":"<pre><code>search(\n    name,\n    query,\n    number_of_results=10,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Search for contextual information within a specific index.</p> <p>This method performs a semantic search against the specified context index, helping to find relevant information that can be used in automation processes. The search is powered by AI and understands natural language queries.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the context index to search in.</p> required <code>query</code> <code>str</code> <p>The search query in natural language.</p> required <code>number_of_results</code> <code>int</code> <p>Maximum number of results to return. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Type Description <code>List[ContextGroundingQueryResponse]</code> <p>List[ContextGroundingQueryResponse]: A list of search results, each containing relevant contextual information and metadata.</p>"},{"location":"core/context_grounding/#uipath._services.context_grounding_service.ContextGroundingService.search_async","title":"search_async  <code>async</code>","text":"<pre><code>search_async(\n    name,\n    query,\n    number_of_results=10,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Search asynchronously for contextual information within a specific index.</p> <p>This method performs a semantic search against the specified context index, helping to find relevant information that can be used in automation processes. The search is powered by AI and understands natural language queries.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the context index to search in.</p> required <code>query</code> <code>str</code> <p>The search query in natural language.</p> required <code>number_of_results</code> <code>int</code> <p>Maximum number of results to return. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Type Description <code>List[ContextGroundingQueryResponse]</code> <p>List[ContextGroundingQueryResponse]: A list of search results, each containing relevant contextual information and metadata.</p>"},{"location":"core/documents/","title":"Documents","text":""},{"location":"core/documents/#uipath._services.documents_service.DocumentsService","title":"DocumentsService","text":"<p>Service for managing UiPath DocumentUnderstanding Document Operations.</p> <p>This service provides methods to extract data from documents using UiPath's Document Understanding capabilities.</p> <p>Preview Feature</p> <p>This function is currently experimental. Behavior and parameters are subject to change in future versions.</p>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.classify","title":"classify","text":"<pre><code>classify(tag, project_name, file=None, file_path=None)\n</code></pre> <p>Classify a document using a DU Modern project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of the DU Modern project.</p> required <code>tag</code> <code>str</code> <p>Tag of the published project version.</p> required <code>file</code> <code>FileContent</code> <p>The document file to be classified.</p> <code>None</code> <code>file_path</code> <code>str</code> <p>Path to the document file to be classified.</p> <code>None</code> Note <p>Either <code>file</code> or <code>file_path</code> must be provided, but not both.</p> <p>Returns:</p> Type Description <code>List[ClassificationResult]</code> <p>List[ClassificationResult]: A list of classification results.</p> <p>Examples:</p> <pre><code>with open(\"path/to/document.pdf\", \"rb\") as file:\n    classification_results = service.classify(\n        project_name=\"MyModernProjectName\",\n        tag=\"Production\",\n        file=file,\n    )\n</code></pre>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.classify_async","title":"classify_async  <code>async</code>","text":"<pre><code>classify_async(\n    tag, project_name, file=None, file_path=None\n)\n</code></pre> <p>Asynchronously version of the <code>classify</code> method.</p>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.create_validation_action","title":"create_validation_action","text":"<pre><code>create_validation_action(\n    action_title,\n    action_priority,\n    action_catalog,\n    action_folder,\n    storage_bucket_name,\n    storage_bucket_directory_path,\n    extraction_response,\n)\n</code></pre> <p>Create a validation action for a document based on the extraction response. More details about validation actions can be found in the official documentation.</p> <p>Parameters:</p> Name Type Description Default <code>action_title</code> <code>str</code> <p>Title of the action.</p> required <code>action_priority</code> <code>ActionPriority</code> <p>Priority of the action.</p> required <code>action_catalog</code> <code>str</code> <p>Catalog of the action.</p> required <code>action_folder</code> <code>str</code> <p>Folder of the action.</p> required <code>storage_bucket_name</code> <code>str</code> <p>Name of the storage bucket.</p> required <code>storage_bucket_directory_path</code> <code>str</code> <p>Directory path in the storage bucket.</p> required <code>extraction_response</code> <code>ExtractionResponse</code> <p>The extraction result to be validated, typically obtained from the <code>extract</code> method.</p> required <p>Returns:</p> Name Type Description <code>ValidationAction</code> <code>ValidationAction</code> <p>The created validation action.</p> <p>Examples:</p> <pre><code>validation_action = service.create_validation_action(\n    action_title=\"Test Validation Action\",\n    action_priority=ActionPriority.MEDIUM,\n    action_catalog=\"default_du_actions\",\n    action_folder=\"Shared\",\n    storage_bucket_name=\"TestBucket\",\n    storage_bucket_directory_path=\"TestDirectory\",\n    extraction_response=extraction_response,\n)\n</code></pre>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.create_validation_action_async","title":"create_validation_action_async  <code>async</code>","text":"<pre><code>create_validation_action_async(\n    action_title,\n    action_priority,\n    action_catalog,\n    action_folder,\n    storage_bucket_name,\n    storage_bucket_directory_path,\n    extraction_response,\n)\n</code></pre> <p>Asynchronous version of the <code>create_validation_action</code> method.</p>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.extract","title":"extract","text":"<pre><code>extract(\n    tag,\n    project_name=None,\n    file=None,\n    file_path=None,\n    classification_result=None,\n    project_type=None,\n    document_type_name=None,\n)\n</code></pre> <p>Extract predicted data from a document using an DU Modern/IXP project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of the IXP/DU Modern project. Must be provided if <code>classification_result</code> is not provided.</p> <code>None</code> <code>tag</code> <code>str</code> <p>Tag of the published project version.</p> required <code>file</code> <code>FileContent</code> <p>The document file to be processed. Must be provided if <code>classification_result</code> is not provided.</p> <code>None</code> <code>file_path</code> <code>str</code> <p>Path to the document file to be processed. Must be provided if <code>classification_result</code> is not provided.</p> <code>None</code> <code>project_type</code> <code>ProjectType</code> <p>Type of the project. Must be provided if <code>project_name</code> is provided.</p> <code>None</code> <code>document_type_name</code> <code>str</code> <p>Document type name associated with the extractor to be used for extraction. Required if <code>project_type</code> is <code>ProjectType.MODERN</code> and <code>project_name</code> is provided.</p> <code>None</code> Note <p>Either <code>file</code> or <code>file_path</code> must be provided, but not both.</p> <p>Returns:</p> Name Type Description <code>ExtractionResponse</code> <code>Union[ExtractionResponse, ExtractionResponseIXP]</code> <p>The extraction result containing predicted data.</p> <p>Examples:</p> <p>IXP projects: <pre><code>with open(\"path/to/document.pdf\", \"rb\") as file:\n    extraction_response = service.extract(\n        project_name=\"MyIXPProjectName\",\n        tag=\"live\",\n        file=file,\n    )\n</code></pre></p> <p>DU Modern projects (providing document type name): <pre><code>with open(\"path/to/document.pdf\", \"rb\") as file:\n    extraction_response = service.extract(\n        project_name=\"MyModernProjectName\",\n        tag=\"Production\",\n        file=file,\n        project_type=ProjectType.MODERN,\n        document_type_name=\"Receipts\",\n    )\n</code></pre></p> <p>DU Modern projects (using existing classification result): <pre><code>with open(\"path/to/document.pdf\", \"rb\") as file:\n    classification_results = uipath.documents.classify(\n        tag=\"Production\",\n        project_name=\"MyModernProjectName\",\n        file=file,\n    )\n\nextraction_result = uipath.documents.extract(\n    tag=\"Production\",\n    classification_result=max(classification_results, key=lambda result: result.confidence),\n)\n</code></pre></p>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.extract_async","title":"extract_async  <code>async</code>","text":"<pre><code>extract_async(\n    tag,\n    project_name=None,\n    file=None,\n    file_path=None,\n    classification_result=None,\n    project_type=None,\n    document_type_name=None,\n)\n</code></pre> <p>Asynchronously version of the <code>extract</code> method.</p>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.get_validation_result","title":"get_validation_result","text":"<pre><code>get_validation_result(validation_action)\n</code></pre> <p>Get the result of a validation action.</p> Note <p>This method will block until the validation action is completed, meaning the user has completed the validation in UiPath Action Center.</p> <p>Parameters:</p> Name Type Description Default <code>validation_action</code> <code>ValidationAction</code> <p>The validation action to get the result for, typically obtained from the <code>create_validation_action</code> method.</p> required <p>Returns:</p> Name Type Description <code>ValidatedResult</code> <code>ValidatedResult</code> <p>The result of the validation action.</p> <p>Examples:</p> <pre><code>validated_result = service.get_validation_result(validation_action)\n</code></pre>"},{"location":"core/documents/#uipath._services.documents_service.DocumentsService.get_validation_result_async","title":"get_validation_result_async  <code>async</code>","text":"<pre><code>get_validation_result_async(validation_action)\n</code></pre> <p>Asynchronous version of the <code>get_validation_result</code> method.</p>"},{"location":"core/documents_models/","title":"Documents","text":""},{"location":"core/documents_models/#uipath.models.documents.ActionPriority","title":"ActionPriority","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Priority levels for validation actions. More details can be found in the official documentation.</p>"},{"location":"core/documents_models/#uipath.models.documents.ActionPriority.CRITICAL","title":"CRITICAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CRITICAL = 'Critical'\n</code></pre> <p>Critical priority</p>"},{"location":"core/documents_models/#uipath.models.documents.ActionPriority.HIGH","title":"HIGH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HIGH = 'High'\n</code></pre> <p>High priority</p>"},{"location":"core/documents_models/#uipath.models.documents.ActionPriority.LOW","title":"LOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOW = 'Low'\n</code></pre> <p>Low priority</p>"},{"location":"core/documents_models/#uipath.models.documents.ActionPriority.MEDIUM","title":"MEDIUM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MEDIUM = 'Medium'\n</code></pre> <p>Medium priority</p>"},{"location":"core/documents_models/#uipath.models.documents.ClassificationResult","title":"ClassificationResult","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model representing the result of a document classification.</p> <p>Attributes:</p> Name Type Description <code>document_id</code> <code>str</code> <p>The ID of the classified document.</p> <code>document_type_id</code> <code>str</code> <p>The ID of the predicted document type.</p> <code>confidence</code> <code>float</code> <p>The confidence score of the classification.</p> <code>ocr_confidence</code> <code>float</code> <p>The OCR confidence score of the document.</p> <code>reference</code> <code>Reference</code> <p>The reference information for the classified document.</p> <code>document_bounds</code> <code>DocumentBounds</code> <p>The bounds of the document in terms of pages and text.</p> <code>classifier_name</code> <code>str</code> <p>The name of the classifier used.</p> <code>project_id</code> <code>str</code> <p>The ID of the project associated with the classification.</p>"},{"location":"core/documents_models/#uipath.models.documents.ExtractionResponse","title":"ExtractionResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model representing the response from a document extraction process.</p> <p>Attributes:</p> Name Type Description <code>extraction_result</code> <code>ExtractionResult</code> <p>The result of the extraction process.</p> <code>project_id</code> <code>str</code> <p>The ID of the project associated with the extraction.</p> <code>tag</code> <code>str</code> <p>The tag associated with the published model version.</p> <code>document_type_id</code> <code>str</code> <p>The ID of the document type associated with the extraction.</p>"},{"location":"core/documents_models/#uipath.models.documents.ExtractionResponseIXP","title":"ExtractionResponseIXP","text":"<p>               Bases: <code>ExtractionResponse</code></p> <p>A model representing the response from a document extraction process for IXP projects.</p> <p>Attributes:</p> Name Type Description <code>data_projection</code> <code>List[FieldGroupValueProjection]</code> <p>A simplified projection of the extracted data.</p>"},{"location":"core/documents_models/#uipath.models.documents.ProjectType","title":"ProjectType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Project types available and supported by Documents Service.</p>"},{"location":"core/documents_models/#uipath.models.documents.ProjectType.IXP","title":"IXP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IXP = 'IXP'\n</code></pre> <p>Represents an IXP project type.</p>"},{"location":"core/documents_models/#uipath.models.documents.ProjectType.MODERN","title":"MODERN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODERN = 'Modern'\n</code></pre> <p>Represents a DU Modern project type.</p>"},{"location":"core/documents_models/#uipath.models.documents.ValidatedResult","title":"ValidatedResult","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model representing the result of a validation action.</p> <p>Attributes:</p> Name Type Description <code>document_id</code> <code>str</code> <p>The ID of the validated document.</p> <code>results_document</code> <code>dict</code> <p>The validated results document.</p>"},{"location":"core/documents_models/#uipath.models.documents.ValidationAction","title":"ValidationAction","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model representing a validation action for a document.</p> <p>Attributes:</p> Name Type Description <code>action_data</code> <code>dict</code> <p>The data associated with the validation action.</p> <code>action_status</code> <code>str</code> <p>The status of the validation action. Possible values can be found in the official documentation.</p> <code>project_id</code> <code>str</code> <p>The ID of the project associated with the validation action.</p> <code>tag</code> <code>str</code> <p>The tag associated with the published model version.</p> <code>operation_id</code> <code>str</code> <p>The operation ID associated with the validation action.</p>"},{"location":"core/environment_variables/","title":"Environment Variables","text":"<p>Environment variables are configuration values stored at the operating system level that can be accessed by applications and scripts. They provide a flexible way to configure application behavior without hardcoding values in your source code.</p> <p>Environment variables are loaded in the following order (highest to lowest priority):</p> <ol> <li><code>.env</code> file in the current directory</li> <li>System environment variables</li> <li>Default values in code</li> </ol> <p>Example: <pre><code># .env file\nUIPATH_FOLDER_PATH=/default/path\n\n# System environment\nexport UIPATH_FOLDER_PATH=/system/path\n</code></pre></p> <p>Warning</p> <p>When deploying your agent to production, ensure that all required environment variables (such as API keys and custom configurations) are properly configured in your process settings. This step is crucial for the successful operation of your published package.</p>"},{"location":"core/environment_variables/#design","title":"Design","text":"<p>Create a <code>.env</code> file in your project's root directory to manage environment variables locally. When using the <code>uipath auth</code> or <code>uipath new my-agent</code> commands, this file is automatically created.</p> <p>The <code>uipath auth</code> command automatically populates this file with essential variables:</p> <ul> <li><code>UIPATH_URL</code>: Your UiPath Orchestrator instance URL</li> <li><code>UIPATH_ACCESS_TOKEN</code>: Authentication token for API access</li> </ul>"},{"location":"core/environment_variables/#folder-configuration","title":"Folder Configuration","text":"<p>Most UiPath services operate within a specific folder context. Configure your folder context using either:</p> <ul> <li><code>UIPATH_FOLDER_PATH</code>: The full path to your target folder</li> <li><code>UIPATH_FOLDER_KEY</code>: The unique identifier for your target folder</li> </ul> <p>To obtain the folder path, right-click on the folder in UiPath Orchestrator and select \"Copy folder path\" from the context menu.</p> <p> </p>"},{"location":"core/environment_variables/#telemetry","title":"Telemetry","text":"<p>To help us improve the developer experience, the CLI collects basic usage data about command invocations. For more details about UiPath's privacy practices, please review the privacy statement.</p> <p>Telemetry is enabled by default. You can opt out by setting the <code>UIPATH_TELEMETRY_ENABLED</code> environment variable to <code>false</code> in your <code>.env</code> file:</p> <pre><code>UIPATH_TELEMETRY_ENABLED=false\n</code></pre>"},{"location":"core/environment_variables/#runtime","title":"Runtime","text":"<p>When executing processes or starting jobs, you can configure environment variables through the UiPath Orchestrator interface. For sensitive information like API keys and secrets, we strongly recommend using secret assets instead of environment variables. Secret assets provide enhanced security and better management capabilities.</p>"},{"location":"core/environment_variables/#secret-assets","title":"Secret Assets","text":"<p>To use a secret asset in your environment variables, reference it using the following format:</p> <pre><code>NAME=%ASSETS/your-secret-asset-name%\n</code></pre> <p> </p>"},{"location":"core/environment_variables/#sensitive-variables","title":"Sensitive Variables","text":"<p>If you must use environment variables for sensitive information (not recommended), variables containing <code>API_KEY</code> or <code>SECRET</code> in their names will have their values masked as <code>****</code> in the interface for security purposes.</p> <p> </p>"},{"location":"core/environment_variables/#log-level","title":"Log Level","text":"<p>The <code>LOG_LEVEL</code> environment variable controls the verbosity of logging in the Orchestrator UI's Log tab during runtime execution. This setting determines which log messages are displayed in the interface.</p> Level Description TRACE Most detailed logging level, shows all possible information DEBUG Detailed information for debugging purposes INFORMATION General operational information WARNING Warning messages for potentially harmful situations ERROR Error events that might still allow the application to continue CRITICAL Critical events that may lead to application failure NONE No logging <p>The default value is <code>INFORMATION</code></p>"},{"location":"core/environment_variables/#builtin-variables","title":"Builtin Variables","text":"<p>The runtime environment automatically includes certain variables (such as <code>UIPATH_FOLDER_KEY</code>, <code>UIPATH_ROBOT_KEY</code>), eliminating the need for manual configuration.</p>"},{"location":"core/getting_started/","title":"Getting Started","text":""},{"location":"core/getting_started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li><code>pip</code> or <code>uv</code> package manager</li> <li>A UiPath Cloud Platform account with appropriate permissions</li> </ul>"},{"location":"core/getting_started/#getting-started-with-the-cli","title":"Getting Started with the CLI","text":"Linux, macOS, Windows BashWindows PowerShell mkdir uipath_coded_processcd uipath_coded_process New-Item -ItemType Directory -Path uipath_coded_processSet-Location uipath_coded_process uvpip # Initialize a new uv project in the current directoryuv init . --python 3.10# Create a new virtual environment# By default, uv creates a virtual environment in a directory called .venvuv venvUsing CPython 3.10.16 interpreter at: [PATH]Creating virtual environment at: .venvActivate with: source .venv/bin/activate# Activate the virtual environment# For Windows PowerShell: .venv\\Scripts\\Activate.ps1# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Install the uipath packageuv add uipath# Verify the uipath installationuipath --versionuipath version 2.0.29 # Create a new virtual environmentpython -m venv .venv# Activate the virtual environment# For Windows PowerShell: .venv\\Scripts\\Activate.ps1# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Upgrade pip to the latest versionpython -m pip install --upgrade pip# Install the uipath packagepip install uipath# Verify the uipath installationuipath --versionuipath version 2.0.29"},{"location":"core/getting_started/#telemetry","title":"Telemetry","text":"<p>To help us improve the developer experience, the CLI collects basic usage data about commands invocation. For more details about UiPath\u2019s privacy practices, please review the privacy statement.</p>"},{"location":"core/getting_started/#disabling-telemetry-data","title":"Disabling telemetry data","text":"<p>Telemetry is enabled by default, yet it is possible to opt-out by setting to <code>false</code> the <code>UIPATH_TELEMETRY_ENABLED</code> environment variable.</p>"},{"location":"core/getting_started/#authentication","title":"Authentication","text":"<p>To debug your script locally and publish your project, you need to authenticate with UiPath:</p> uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful. <p>This command opens a new browser window for authentication. If you encounter any issues, copy the URL from the terminal and paste it into your browser. After authentication, select your tenant by entering its corresponding number in the terminal.</p> <p>Upon successful authentication, your project will contain a <code>.env</code> file with your access token, UiPath URL, and other configuration details.</p>"},{"location":"core/getting_started/#writing-your-code","title":"Writing Your Code","text":"<p>Open <code>main.py</code> in your code editor. You can start with this example code:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass EchoIn:\n    message: str\n    repeat: Optional[int] = 1\n    prefix: Optional[str] = None\n\n\n@dataclass\nclass EchoOut:\n    message: str\n\n\ndef main(input: EchoIn) -&gt; EchoOut:\n    result = []\n    for _ in range(input.repeat or 1):\n        line = input.message\n        if input.prefix:\n            line = f\"{input.prefix}: {line}\"\n        result.append(line)\n\n    return EchoOut(message=\"\\n\".join(result))\n</code></pre>"},{"location":"core/getting_started/#initializing-the-uipath-project","title":"Initializing the UiPath Project","text":"<p>To create a UiPath project, run the following command in your terminal:</p> uipath init\u280b Initializing UiPath project ...\u2713  Created 'uipath.json' file. <p>Warning</p> <p>The <code>uipath init</code> command executes your <code>main.py</code> file to analyze its structure and collect information about inputs and outputs.</p> <p>This command creates a <code>uipath.json</code> file containing the project metadata.</p> # Debug your projectuipath run main.py '{\"message\": \"test\"}'[2025-04-11 10:13:58,857][INFO] {'message': 'test'} <p>Warning</p> <p>Depending on the shell you are using, it may be necessary to escape the input json:</p> Bash/ZSH/PowerShellWindows CMDWindows PowerShell <pre><code>uipath run main.py '{\"message\": \"test\"}'\n</code></pre> <pre><code>uipath run main.py \"{\"\"message\"\": \"\"test\"\"}\"\n</code></pre> <pre><code>uipath run main.py '{\\\"message\\\":\\\"test\\\"}'\n</code></pre>"},{"location":"core/getting_started/#packaging-and-publishing","title":"Packaging and Publishing","text":"<p>Before packaging your project, add your details to the <code>pyproject.toml</code> file. Add the following line below the <code>description</code> field:</p> <pre><code>authors = [{ name = \"Your Name\", email = \"your.email@uipath.com\" }]\n</code></pre> <p>Then, package your project:</p> uipath pack\u280b Packaging project ...Name       : uipath_coded_processVersion    : 0.1.0Description: Add your description hereAuthors    : Your Name\u2713  Project successfully packaged. <p>Finally, publish your package:</p> uipath publish\u280b Fetching available package feeds...\ud83d\udc47 Select package feed:  0: Orchestrator Tenant Processes Feed  1: Orchestrator Personal Workspace FeedSelect feed number: 0Selected feed: Orchestrator Tenant Processes Feed\u2838 Publishing most recent package: uipath_coded_process.0.1.0.nupkg ...\u2713  Package published successfully! <p>After selecting your publishing destination (tenant or personal workspace), you'll see details about your package and a confirmation message.</p>"},{"location":"core/getting_started/#integrating-with-the-uipath-platform","title":"Integrating with the UiPath Platform","text":"<p>Create a new project (separate from the one you just packaged and published) following the same steps as above. This new project will invoke your previous process using the UiPath SDK.</p> <p>Open <code>main.py</code> in your code editor and add the following code:</p> <pre><code>from uipath import UiPath\n\n\ndef main():\n    sdk = UiPath()\n    sdk.processes.invoke(\n        \"uipath_coded_process\",\n        input_arguments={\n            \"message\": \"Hello, World!\",\n            \"repeat\": 3,\n            \"prefix\": \"[Echo]\"\n        },\n        folder_path=\"PROCESS_FOLDER_PATH_HERE\"\n    )\n</code></pre> <p>Warning</p> <p>An agent can invoke itself if needed, but this must be done with caution. Be mindful that using the same name for invocation may lead to unintentional loops. To prevent recursion issues, implement safeguards like exit conditions.</p>"},{"location":"core/getting_started/#verifying-the-execution","title":"Verifying the Execution","text":"uipath run main.py <p>Open your browser and navigate to UiPath. Go to the specified folder, where you'll see a new job for <code>uipath_coded_process</code> has been executed. The output will be:</p> <pre><code>[Echo]: Hello, World! Echo: Hello, World! Echo: Hello, World!\n</code></pre>"},{"location":"core/jobs/","title":"Jobs","text":""},{"location":"core/jobs/#uipath._services.jobs_service.JobsService","title":"JobsService","text":"<p>Service for managing API payloads and job inbox interactions.</p> <p>A job represents a single execution of an automation - it is created when you start   a process and contains information about that specific run, including its status,   start time, and any input/output data.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.create_attachment","title":"create_attachment","text":"<pre><code>create_attachment(\n    *,\n    name,\n    content=None,\n    source_path=None,\n    job_key=None,\n    category=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Create and upload an attachment, optionally linking it to a job.</p> <p>This method handles creating an attachment from a file or memory data. If a job key is provided or available in the execution context, the attachment will be created in UiPath and linked to the job. If no job is available, the file will be saved to a temporary storage folder.</p> Note <p>The local storage functionality (when no job is available) is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the attachment file.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>source_path</code> <code>Optional[Union[str, Path]]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>job_key</code> <code>Optional[Union[str, UUID]]</code> <p>The key of the job to link the attachment to.</p> <code>None</code> <code>category</code> <code>Optional[str]</code> <p>Optional category for the attachment in the context of the job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>UUID</code> <p>uuid.UUID: The unique identifier for the created attachment, regardless of whether it was uploaded to UiPath or stored locally.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p> <code>Exception</code> <p>If the upload fails.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\n# Create attachment from file and link to job\nattachment_id = client.jobs.create_attachment(\n    name=\"document.pdf\",\n    source_path=\"path/to/local/document.pdf\",\n    job_key=\"38073051\"\n)\nprint(f\"Created and linked attachment: {attachment_id}\")\n\n# Create attachment from memory content (no job available - saves to temp storage)\nattachment_id = client.jobs.create_attachment(\n    name=\"report.txt\",\n    content=\"This is a text report\"\n)\nprint(f\"Created attachment: {attachment_id}\")\n</code></pre>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.create_attachment_async","title":"create_attachment_async  <code>async</code>","text":"<pre><code>create_attachment_async(\n    *,\n    name,\n    content=None,\n    source_path=None,\n    job_key=None,\n    category=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Create and upload an attachment asynchronously, optionally linking it to a job.</p> <p>This method asynchronously handles creating an attachment from a file or memory data. If a job key is provided or available in the execution context, the attachment will be created in UiPath and linked to the job. If no job is available, the file will be saved to a temporary storage folder.</p> Note <p>The local storage functionality (when no job is available) is intended for local development and debugging purposes only.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the attachment file.</p> required <code>content</code> <code>Optional[Union[str, bytes]]</code> <p>The content to upload (string or bytes).</p> <code>None</code> <code>source_path</code> <code>Optional[Union[str, Path]]</code> <p>The local path of the file to upload.</p> <code>None</code> <code>job_key</code> <code>Optional[Union[str, UUID]]</code> <p>The key of the job to link the attachment to.</p> <code>None</code> <code>category</code> <code>Optional[str]</code> <p>Optional category for the attachment in the context of the job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>UUID</code> <p>uuid.UUID: The unique identifier for the created attachment, regardless of whether it was uploaded to UiPath or stored locally.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither content nor source_path is provided, or if both are provided.</p> <code>Exception</code> <p>If the upload fails.</p> <p>Examples:</p> <pre><code>import asyncio\nfrom uipath import UiPath\n\nclient = UiPath()\n\nasync def main():\n    # Create attachment from file and link to job\n    attachment_id = await client.jobs.create_attachment_async(\n        name=\"document.pdf\",\n        source_path=\"path/to/local/document.pdf\",\n        job_key=\"38073051\"\n    )\n    print(f\"Created and linked attachment: {attachment_id}\")\n\n    # Create attachment from memory content (no job available - saves to temp storage)\n    attachment_id = await client.jobs.create_attachment_async(\n        name=\"report.txt\",\n        content=\"This is a text report\"\n    )\n    print(f\"Created attachment: {attachment_id}\")\n</code></pre>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.extract_output","title":"extract_output","text":"<pre><code>extract_output(job)\n</code></pre> <p>Get the actual output data, downloading from attachment if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job instance to fetch output data from.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Parsed output arguments as dictionary, or None if no output</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.extract_output_async","title":"extract_output_async  <code>async</code>","text":"<pre><code>extract_output_async(job)\n</code></pre> <p>Asynchronously fetch the actual output data, downloading from attachment if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job instance to fetch output data from.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Parsed output arguments as dictionary, or None if no output</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.link_attachment","title":"link_attachment","text":"<pre><code>link_attachment(\n    *,\n    attachment_key,\n    job_key,\n    category=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Link an attachment to a job.</p> <p>This method links an existing attachment to a specific job.</p> <p>Parameters:</p> Name Type Description Default <code>attachment_key</code> <code>UUID</code> <p>The key of the attachment to link.</p> required <code>job_key</code> <code>UUID</code> <p>The key of the job to link the attachment to.</p> required <code>category</code> <code>Optional[str]</code> <p>Optional category for the attachment in the context of this job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the link operation fails.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.link_attachment_async","title":"link_attachment_async  <code>async</code>","text":"<pre><code>link_attachment_async(\n    *,\n    attachment_key,\n    job_key,\n    category=None,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Link an attachment to a job asynchronously.</p> <p>This method asynchronously links an existing attachment to a specific job.</p> <p>Parameters:</p> Name Type Description Default <code>attachment_key</code> <code>UUID</code> <p>The key of the attachment to link.</p> required <code>job_key</code> <code>UUID</code> <p>The key of the job to link the attachment to.</p> required <code>category</code> <code>Optional[str]</code> <p>Optional category for the attachment in the context of this job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the link operation fails.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.list_attachments","title":"list_attachments","text":"<pre><code>list_attachments(\n    *, job_key, folder_key=None, folder_path=None\n)\n</code></pre> <p>List attachments associated with a specific job.</p> <p>This method retrieves all attachments linked to a job by its key.</p> <p>Parameters:</p> Name Type Description Default <code>job_key</code> <code>UUID</code> <p>The key of the job to retrieve attachments for.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of attachment IDs associated with the job.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the retrieval fails.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.list_attachments_async","title":"list_attachments_async  <code>async</code>","text":"<pre><code>list_attachments_async(\n    *, job_key, folder_key=None, folder_path=None\n)\n</code></pre> <p>List attachments associated with a specific job asynchronously.</p> <p>This method asynchronously retrieves all attachments linked to a job by its key.</p> <p>Parameters:</p> Name Type Description Default <code>job_key</code> <code>UUID</code> <p>The key of the job to retrieve attachments for.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of attachment IDs associated with the job.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the retrieval fails.</p> <p>Examples:</p> <pre><code>import asyncio\nfrom uipath import UiPath\n\nclient = UiPath()\n\nasync def main():\n    attachments = await client.jobs.list_attachments_async(\n        job_key=uuid.UUID(\"123e4567-e89b-12d3-a456-426614174000\")\n    )\n    for attachment_id in attachments:\n        print(f\"Attachment ID: {attachment_id}\")\n</code></pre>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.resume","title":"resume","text":"<pre><code>resume(\n    *,\n    inbox_id=None,\n    job_id=None,\n    folder_key=None,\n    folder_path=None,\n    payload,\n)\n</code></pre> <p>Sends a payload to resume a paused job waiting for input, identified by its inbox ID.</p> <p>Parameters:</p> Name Type Description Default <code>inbox_id</code> <code>Optional[str]</code> <p>The inbox ID of the job.</p> <code>None</code> <code>job_id</code> <code>Optional[str]</code> <p>The job ID of the job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>payload</code> <code>Any</code> <p>The payload to deliver.</p> required"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.resume_async","title":"resume_async  <code>async</code>","text":"<pre><code>resume_async(\n    *,\n    inbox_id=None,\n    job_id=None,\n    folder_key=None,\n    folder_path=None,\n    payload,\n)\n</code></pre> <p>Asynchronously sends a payload to resume a paused job waiting for input, identified by its inbox ID.</p> <p>Parameters:</p> Name Type Description Default <code>inbox_id</code> <code>Optional[str]</code> <p>The inbox ID of the job. If not provided, the execution context will be used to retrieve the inbox ID.</p> <code>None</code> <code>job_id</code> <code>Optional[str]</code> <p>The job ID of the job.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>payload</code> <code>Any</code> <p>The payload to deliver.</p> required <p>Examples:</p> <pre><code>import asyncio\n\nfrom uipath import UiPath\n\nsdk = UiPath()\n\n\nasync def main():  # noqa: D103\n    payload = await sdk.jobs.resume_async(job_id=\"38073051\", payload=\"The response\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.retrieve","title":"retrieve","text":"<pre><code>retrieve(job_key, *, folder_key=None, folder_path=None)\n</code></pre> <p>Retrieve a job identified by its key.</p> <p>Parameters:</p> Name Type Description Default <code>job_key</code> <code>str</code> <p>The job unique identifier.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder in which the job was executed.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder in which the job was executed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>The retrieved job.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nsdk = UiPath()\njob = sdk.jobs.retrieve(job_key=\"ee9327fd-237d-419e-86ef-9946b34461e3\", folder_path=\"Shared\")\n</code></pre>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.retrieve_api_payload","title":"retrieve_api_payload","text":"<pre><code>retrieve_api_payload(inbox_id)\n</code></pre> <p>Fetch payload data for API triggers.</p> <p>Parameters:</p> Name Type Description Default <code>inbox_id</code> <code>str</code> <p>The Id of the inbox to fetch the payload for.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value field from the API response payload.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.retrieve_api_payload_async","title":"retrieve_api_payload_async  <code>async</code>","text":"<pre><code>retrieve_api_payload_async(inbox_id)\n</code></pre> <p>Asynchronously fetch payload data for API triggers.</p> <p>Parameters:</p> Name Type Description Default <code>inbox_id</code> <code>str</code> <p>The Id of the inbox to fetch the payload for.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value field from the API response payload.</p>"},{"location":"core/jobs/#uipath._services.jobs_service.JobsService.retrieve_async","title":"retrieve_async  <code>async</code>","text":"<pre><code>retrieve_async(\n    job_key, *, folder_key=None, folder_path=None\n)\n</code></pre> <p>Asynchronously retrieve a job identified by its key.</p> <p>Parameters:</p> Name Type Description Default <code>job_key</code> <code>str</code> <p>The job unique identifier.</p> required <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder in which the job was executed.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder in which the job was executed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>The retrieved job.</p> <p>Examples:</p> <pre><code>import asyncio\n\nfrom uipath import UiPath\n\nsdk = UiPath()\n\n\nasync def main():  # noqa: D103\n    job = await sdk.jobs.retrieve_async(job_key=\"ee9327fd-237d-419e-86ef-9946b34461e3\", folder_path=\"Shared\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"core/llm_gateway/","title":"LLM Gateway","text":"<p>UiPath LLM Gateway Services.</p> <p>This module provides services for interacting with UiPath's LLM (Large Language Model) Gateway, offering both OpenAI-compatible and normalized API interfaces for chat completions and embeddings.</p> <p>The module includes: - UiPathOpenAIService: OpenAI-compatible API for chat completions and embeddings - UiPathLlmChatService: UiPath's normalized API with advanced features like tool calling - ChatModels: Constants for available chat models - EmbeddingModels: Constants for available embedding models</p> <p>Classes:</p> Name Description <code>ChatModels</code> <p>Container for supported chat model identifiers</p> <code>EmbeddingModels</code> <p>Container for supported embedding model identifiers</p> <code>UiPathOpenAIService</code> <p>Service using OpenAI-compatible API format</p> <code>UiPathLlmChatService</code> <p>Service using UiPath's normalized API format</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.ChatModels","title":"ChatModels","text":"<p>Available chat models for LLM Gateway services.</p> <p>This class provides constants for the supported chat models that can be used with both UiPathOpenAIService and UiPathLlmChatService.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.EmbeddingModels","title":"EmbeddingModels","text":"<p>Available embedding models for LLM Gateway services.</p> <p>This class provides constants for the supported embedding models that can be used with the embeddings functionality.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.UiPathLlmChatService","title":"UiPathLlmChatService","text":"<p>Service for calling UiPath's normalized LLM Gateway API.</p> <p>This service provides access to Large Language Model capabilities through UiPath's normalized LLM Gateway API. Unlike the OpenAI-compatible service, this service uses UiPath's standardized API format and supports advanced features like tool calling, function calling, and more sophisticated conversation control.</p> <p>The normalized API provides a consistent interface across different underlying model providers and includes enhanced features for enterprise use cases.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.UiPathLlmChatService.chat_completions","title":"chat_completions  <code>async</code>","text":"<pre><code>chat_completions(\n    messages,\n    model=ChatModels.gpt_4o_mini_2024_07_18,\n    max_tokens=4096,\n    temperature=0,\n    n=1,\n    frequency_penalty=0,\n    presence_penalty=0,\n    top_p=1,\n    top_k=None,\n    tools=None,\n    tool_choice=None,\n    response_format=None,\n    api_version=NORMALIZED_API_VERSION,\n)\n</code></pre> <p>Generate chat completions using UiPath's normalized LLM Gateway API.</p> <p>This method provides advanced conversational AI capabilities with support for tool calling, function calling, and sophisticated conversation control parameters. It uses UiPath's normalized API format for consistent behavior across different model providers.</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>List[Dict[str, str]]</code> <p>List of message dictionaries with 'role' and 'content' keys. The supported roles are 'system', 'user', and 'assistant'. System messages set the behavior/context, user messages are from the human, and assistant messages are from the AI.</p> required <code>model</code> <code>str</code> <p>The model to use for chat completion. Defaults to ChatModels.gpt_4o_mini_2024_07_18. Available models are defined in the ChatModels class.</p> <code>gpt_4o_mini_2024_07_18</code> <code>max_tokens</code> <code>int</code> <p>Maximum number of tokens to generate in the response. Defaults to 4096. Higher values allow longer responses.</p> <code>4096</code> <code>temperature</code> <code>float</code> <p>Temperature for sampling, between 0 and 1. Lower values (closer to 0) make output more deterministic and focused, higher values make it more creative and random. Defaults to 0.</p> <code>0</code> <code>n</code> <code>int</code> <p>Number of chat completion choices to generate for each input. Defaults to 1. Higher values generate multiple alternative responses.</p> <code>1</code> <code>frequency_penalty</code> <code>float</code> <p>Penalty for token frequency between -2.0 and 2.0. Positive values reduce repetition of frequent tokens. Defaults to 0.</p> <code>0</code> <code>presence_penalty</code> <code>float</code> <p>Penalty for token presence between -2.0 and 2.0. Positive values encourage discussion of new topics. Defaults to 0.</p> <code>0</code> <code>top_p</code> <code>float</code> <p>Nucleus sampling parameter between 0 and 1. Controls diversity by considering only the top p probability mass. Defaults to 1.</p> <code>1</code> <code>top_k</code> <code>int</code> <p>Nucleus sampling parameter. Controls diversity by considering only the top k most probable tokens. Defaults to None.</p> <code>None</code> <code>tools</code> <code>Optional[List[ToolDefinition]]</code> <p>List of tool definitions that the model can call. Tools enable the model to perform actions or retrieve information beyond text generation. Defaults to None.</p> <code>None</code> <code>tool_choice</code> <code>Optional[ToolChoice]</code> <p>Controls which tools the model can call. Can be \"auto\" (model decides), \"none\" (no tools), or a specific tool choice. Defaults to None.</p> <code>None</code> <code>response_format</code> <code>Optional[Union[Dict[str, Any], type[BaseModel]]]</code> <p>An object specifying the format that the model must output. Can be either: - A dictionary with response format configuration (traditional format) - A Pydantic BaseModel class (automatically converted to JSON schema) Used to enable JSON mode or other structured outputs. Defaults to None.</p> <code>None</code> <code>api_version</code> <code>str</code> <p>The normalized API version to use. Defaults to NORMALIZED_API_VERSION.</p> <code>NORMALIZED_API_VERSION</code> <p>Returns:</p> Name Type Description <code>ChatCompletion</code> <p>The chat completion response containing the generated message(s), tool calls (if any), usage statistics, and other metadata.</p> <p>Examples:</p> <pre><code># Basic conversation\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"What is the weather like today?\"}\n]\nresponse = await service.chat_completions(messages)\n\n# Conversation with tool calling\ntools = [\n    ToolDefinition(\n        function=FunctionDefinition(\n            name=\"get_weather\",\n            description=\"Get current weather for a location\",\n            parameters=ParametersDefinition(\n                type=\"object\",\n                properties={\n                    \"location\": PropertyDefinition(\n                        type=\"string\",\n                        description=\"City name\"\n                    )\n                },\n                required=[\"location\"]\n            )\n        )\n    )\n]\nresponse = await service.chat_completions(\n    messages,\n    tools=tools,\n    tool_choice=\"auto\",\n    max_tokens=500\n)\n\n# Advanced parameters for creative writing\nresponse = await service.chat_completions(\n    messages,\n    temperature=0.8,\n    top_p=0.9,\n    frequency_penalty=0.3,\n    presence_penalty=0.2,\n    n=3  # Generate 3 alternative responses\n)\n\n# Using Pydantic model for structured response\nfrom pydantic import BaseModel\nfrom typing import List\n\nclass Country(BaseModel):\n    name: str\n    capital: str\n    languages: List[str]\n\nresponse = await service.chat_completions(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant. Respond with structured JSON.\"},\n        {\"role\": \"user\", \"content\": \"Tell me about Canada.\"}\n    ],\n    response_format=Country,  # Pass BaseModel directly\n    max_tokens=1000\n)\n)\n</code></pre> Note <p>This service uses UiPath's normalized API format which provides consistent behavior across different underlying model providers and enhanced enterprise features.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.UiPathOpenAIService","title":"UiPathOpenAIService","text":"<p>Service for calling UiPath's LLM Gateway using OpenAI-compatible API.</p> <p>This service provides access to Large Language Model capabilities through UiPath's LLM Gateway, including chat completions and text embeddings. It uses the OpenAI-compatible API format and is suitable for applications that need direct OpenAI API compatibility.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.UiPathOpenAIService.chat_completions","title":"chat_completions  <code>async</code>","text":"<pre><code>chat_completions(\n    messages,\n    model=ChatModels.gpt_4o_mini_2024_07_18,\n    max_tokens=4096,\n    temperature=0,\n    response_format=None,\n    api_version=API_VERSION,\n)\n</code></pre> <p>Generate chat completions using UiPath's LLM Gateway service.</p> <p>This method provides conversational AI capabilities by sending a series of messages to a language model and receiving a generated response. It supports multi-turn conversations and various OpenAI-compatible models.</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>List[Dict[str, str]]</code> <p>List of message dictionaries with 'role' and 'content' keys. The supported roles are 'system', 'user', and 'assistant'. System messages set the behavior/context, user messages are from the human, and assistant messages are from the AI.</p> required <code>model</code> <code>str</code> <p>The model to use for chat completion. Defaults to ChatModels.gpt_4o_mini_2024_07_18. Available models are defined in the ChatModels class.</p> <code>gpt_4o_mini_2024_07_18</code> <code>max_tokens</code> <code>int</code> <p>Maximum number of tokens to generate in the response. Defaults to 4096. Higher values allow longer responses.</p> <code>4096</code> <code>temperature</code> <code>float</code> <p>Temperature for sampling, between 0 and 1. Lower values (closer to 0) make output more deterministic and focused, higher values make it more creative and random. Defaults to 0.</p> <code>0</code> <code>response_format</code> <code>Optional[Union[Dict[str, Any], type[BaseModel]]]</code> <p>An object specifying the format that the model must output. Can be either: - A dictionary with response format configuration (traditional format) - A Pydantic BaseModel class (automatically converted to JSON schema) Used to enable JSON mode or other structured outputs. Defaults to None.</p> <code>None</code> <code>api_version</code> <code>str</code> <p>The API version to use. Defaults to API_VERSION.</p> <code>API_VERSION</code> <p>Returns:</p> Name Type Description <code>ChatCompletion</code> <p>The chat completion response containing the generated message, usage statistics, and other metadata.</p> <p>Examples:</p> <pre><code># Simple conversation\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful Python programming assistant.\"},\n    {\"role\": \"user\", \"content\": \"How do I read a file in Python?\"}\n]\nresponse = await service.chat_completions(messages)\n\n# Multi-turn conversation with more tokens\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"What is machine learning?\"},\n    {\"role\": \"assistant\", \"content\": \"Machine learning is a subset of AI...\"},\n    {\"role\": \"user\", \"content\": \"Can you give me a practical example?\"}\n]\nresponse = await service.chat_completions(\n    messages,\n    max_tokens=200,\n    temperature=0.3\n)\n\n# Using Pydantic model for structured response\nfrom pydantic import BaseModel\nfrom typing import List\n\nclass Country(BaseModel):\n    name: str\n    capital: str\n    languages: List[str]\n\nresponse = await service.chat_completions(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant. Respond with structured JSON.\"},\n        {\"role\": \"user\", \"content\": \"Tell me about Canada.\"}\n    ],\n    response_format=Country,  # Pass BaseModel directly\n    max_tokens=1000\n)\n</code></pre> Note <p>The conversation history can be included to provide context to the model. Each message should have both 'role' and 'content' keys. When using a Pydantic BaseModel as response_format, it will be automatically converted to the appropriate JSON schema format for the LLM Gateway.</p>"},{"location":"core/llm_gateway/#uipath._services.llm_gateway_service.UiPathOpenAIService.embeddings","title":"embeddings  <code>async</code>","text":"<pre><code>embeddings(\n    input,\n    embedding_model=EmbeddingModels.text_embedding_ada_002,\n    openai_api_version=API_VERSION,\n)\n</code></pre> <p>Generate text embeddings using UiPath's LLM Gateway service.</p> <p>This method converts input text into dense vector representations that can be used for semantic search, similarity calculations, and other NLP tasks.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>The input text to embed. Can be a single sentence, paragraph, or document that you want to convert to embeddings.</p> required <code>embedding_model</code> <code>str</code> <p>The embedding model to use. Defaults to EmbeddingModels.text_embedding_ada_002. Available models are defined in the EmbeddingModels class.</p> <code>text_embedding_ada_002</code> <code>openai_api_version</code> <code>str</code> <p>The OpenAI API version to use. Defaults to API_VERSION.</p> <code>API_VERSION</code> <p>Returns:</p> Name Type Description <code>TextEmbedding</code> <p>The embedding response containing the vector representation of the input text along with metadata.</p> <p>Examples:</p> <pre><code># Basic embedding\nembedding = await service.embeddings(\"Hello, world!\")\n\n# Using a specific model\nembedding = await service.embeddings(\n    \"This is a longer text to embed\",\n    embedding_model=EmbeddingModels.text_embedding_3_large\n)\n</code></pre>"},{"location":"core/processes/","title":"Processes","text":""},{"location":"core/processes/#uipath._services.processes_service.ProcessesService","title":"ProcessesService","text":"<p>Service for managing and executing UiPath automation processes.</p> <p>Processes (also known as automations or workflows) are the core units of automation in UiPath, representing sequences of activities that perform specific business tasks.</p>"},{"location":"core/processes/#uipath._services.processes_service.ProcessesService.invoke","title":"invoke","text":"<pre><code>invoke(\n    name,\n    input_arguments=None,\n    *,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Start execution of a process by its name.</p> <p>Related Activity: Invoke Process</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the process to execute.</p> required <code>input_arguments</code> <code>Optional[Dict[str, Any]]</code> <p>The input arguments to pass to the process.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>The job execution details.</p> <p>Examples:</p> <pre><code>from uipath import UiPath\n\nclient = UiPath()\n\nclient.processes.invoke(name=\"MyProcess\")\n</code></pre> <pre><code># if you want to execute the process in a specific folder\n# another one than the one set in the SDK config\nfrom uipath import UiPath\n\nclient = UiPath()\n\nclient.processes.invoke(name=\"MyProcess\", folder_path=\"my-folder-key\")\n</code></pre>"},{"location":"core/processes/#uipath._services.processes_service.ProcessesService.invoke_async","title":"invoke_async  <code>async</code>","text":"<pre><code>invoke_async(\n    name,\n    input_arguments=None,\n    *,\n    folder_key=None,\n    folder_path=None,\n)\n</code></pre> <p>Asynchronously start execution of a process by its name.</p> <p>Related Activity: Invoke Process</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the process to execute.</p> required <code>input_arguments</code> <code>Optional[Dict[str, Any]]</code> <p>The input arguments to pass to the process.</p> <code>None</code> <code>folder_key</code> <code>Optional[str]</code> <p>The key of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <code>folder_path</code> <code>Optional[str]</code> <p>The path of the folder to execute the process in. Override the default one set in the SDK config.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>The job execution details.</p> <p>Examples:</p> <pre><code>import asyncio\n\nfrom uipath import UiPath\n\nsdk = UiPath()\n\nasync def main():\n    job = await sdk.processes.invoke_async(\"testAppAction\")\n    print(job)\n\nasyncio.run(main())\n</code></pre>"},{"location":"core/queues/","title":"Queues","text":""},{"location":"core/queues/#uipath._services.queues_service.QueuesService","title":"QueuesService","text":"<p>Service for managing UiPath queues and queue items.</p> <p>Queues are a fundamental component of UiPath automation that enable distributed and scalable processing of work items.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.complete_transaction_item","title":"complete_transaction_item","text":"<pre><code>complete_transaction_item(transaction_key, result)\n</code></pre> <p>Completes a transaction item with the specified result.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_key</code> <code>str</code> <p>Unique identifier of the transaction to complete.</p> required <code>result</code> <code>Union[Dict[str, Any], TransactionItemResult]</code> <p>Result data for the transaction, either as a dictionary or TransactionItemResult instance.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response confirming the transaction completion.</p> <p>Related Activity: Set Transaction Status</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.complete_transaction_item_async","title":"complete_transaction_item_async  <code>async</code>","text":"<pre><code>complete_transaction_item_async(transaction_key, result)\n</code></pre> <p>Asynchronously completes a transaction item with the specified result.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_key</code> <code>str</code> <p>Unique identifier of the transaction to complete.</p> required <code>result</code> <code>Union[Dict[str, Any], TransactionItemResult]</code> <p>Result data for the transaction, either as a dictionary or TransactionItemResult instance.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response confirming the transaction completion.</p> <p>Related Activity: Set Transaction Status</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_item","title":"create_item","text":"<pre><code>create_item(item)\n</code></pre> <p>Creates a new queue item in the Orchestrator.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Union[Dict[str, Any], QueueItem]</code> <p>Queue item data, either as a dictionary or QueueItem instance.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the created queue item details.</p> <p>Related Activity: Add Queue Item</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_item_async","title":"create_item_async  <code>async</code>","text":"<pre><code>create_item_async(item)\n</code></pre> <p>Asynchronously creates a new queue item in the Orchestrator.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Union[Dict[str, Any], QueueItem]</code> <p>Queue item data, either as a dictionary or QueueItem instance.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the created queue item details.</p> <p>Related Activity: Add Queue Item</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_items","title":"create_items","text":"<pre><code>create_items(items, queue_name, commit_type)\n</code></pre> <p>Creates multiple queue items in bulk.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>List[Union[Dict[str, Any], QueueItem]]</code> <p>List of queue items to create, each either a dictionary or QueueItem instance.</p> required <code>queue_name</code> <code>str</code> <p>Name of the target queue.</p> required <code>commit_type</code> <code>CommitType</code> <p>Type of commit operation to use for the bulk operation.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the bulk operation result.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_items_async","title":"create_items_async  <code>async</code>","text":"<pre><code>create_items_async(items, queue_name, commit_type)\n</code></pre> <p>Asynchronously creates multiple queue items in bulk.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>List[Union[Dict[str, Any], QueueItem]]</code> <p>List of queue items to create, each either a dictionary or QueueItem instance.</p> required <code>queue_name</code> <code>str</code> <p>Name of the target queue.</p> required <code>commit_type</code> <code>CommitType</code> <p>Type of commit operation to use for the bulk operation.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the bulk operation result.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_transaction_item","title":"create_transaction_item","text":"<pre><code>create_transaction_item(item, no_robot=False)\n</code></pre> <p>Creates a new transaction item in a queue.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Union[Dict[str, Any], TransactionItem]</code> <p>Transaction item data, either as a dictionary or TransactionItem instance.</p> required <code>no_robot</code> <code>bool</code> <p>If True, the transaction will not be associated with a robot. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the transaction item details.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.create_transaction_item_async","title":"create_transaction_item_async  <code>async</code>","text":"<pre><code>create_transaction_item_async(item, no_robot=False)\n</code></pre> <p>Asynchronously creates a new transaction item in a queue.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Union[Dict[str, Any], TransactionItem]</code> <p>Transaction item data, either as a dictionary or TransactionItem instance.</p> required <code>no_robot</code> <code>bool</code> <p>If True, the transaction will not be associated with a robot. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the transaction item details.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.list_items","title":"list_items","text":"<pre><code>list_items()\n</code></pre> <p>Retrieves a list of queue items from the Orchestrator.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the list of queue items.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.list_items_async","title":"list_items_async  <code>async</code>","text":"<pre><code>list_items_async()\n</code></pre> <p>Asynchronously retrieves a list of queue items from the Orchestrator.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response containing the list of queue items.</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.update_progress_of_transaction_item","title":"update_progress_of_transaction_item","text":"<pre><code>update_progress_of_transaction_item(\n    transaction_key, progress\n)\n</code></pre> <p>Updates the progress of a transaction item.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_key</code> <code>str</code> <p>Unique identifier of the transaction.</p> required <code>progress</code> <code>str</code> <p>Progress message to set.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response confirming the progress update.</p> <p>Related Activity: Set Transaction Progress</p>"},{"location":"core/queues/#uipath._services.queues_service.QueuesService.update_progress_of_transaction_item_async","title":"update_progress_of_transaction_item_async  <code>async</code>","text":"<pre><code>update_progress_of_transaction_item_async(\n    transaction_key, progress\n)\n</code></pre> <p>Asynchronously updates the progress of a transaction item.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_key</code> <code>str</code> <p>Unique identifier of the transaction.</p> required <code>progress</code> <code>str</code> <p>Progress message to set.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>HTTP response confirming the progress update.</p> <p>Related Activity: Set Transaction Progress</p>"},{"location":"core/traced/","title":"Tracing","text":"<p>The <code>traced()</code> decorator enables automatic tracing of function calls, inputs, and outputs. It is designed to help you monitor, debug, and audit your code by capturing detailed information about function executions, including arguments, return values, and exceptions.</p> <p>You can view the traces of an Orchestrator job by going to the Jobs page, click a job, a side panel will open, and they will be available under the <code>Trace</code> tab. These can also be seen in UiPath Maestro when your agent is part of a larger process orchestration.</p>"},{"location":"core/traced/#usage","title":"Usage","text":"<p>Apply the <code>@traced()</code> decorator to any function (sync, async, generator, or async generator) to automatically record its execution as a trace span.</p> <pre><code>from uipath.tracing import traced\n\n@traced()\ndef my_function(x, y):\n    return x + y\n\n@traced(name=\"custom_span\", run_type=\"my_type\")\nasync def my_async_function(a, b):\n    return a * b\n</code></pre>"},{"location":"core/traced/#parameters","title":"Parameters","text":"Parameter Type Description name Optional[str] Custom name for the trace span. Defaults to the function name. run_type Optional[str] Category for the run (e.g., \"uipath\"). Useful for filtering traces. span_type Optional[str] Custom type for the span. Defaults to function type (sync/async/generator). input_processor Optional[Callable[[dict], dict]] Function to process/transform inputs before recording. Receives a dict of arguments. output_processor Optional[Callable[[Any], Any]] Function to process/transform outputs before recording. Receives the function's return value. hide_input bool If True, input data is redacted in the trace for privacy/security. hide_output bool If True, output data is redacted in the trace for privacy/security."},{"location":"core/traced/#input-and-output-processors","title":"Input and Output Processors","text":"<p>Processors allow you to mask, redact, or transform sensitive data before it is recorded in the trace. For example:</p> <pre><code>def mask_inputs(inputs):\n    inputs = inputs.copy()\n    if 'password' in inputs:\n        inputs['password'] = '***REDACTED***'\n    return inputs\n\ndef anonymize_output(output):\n    if isinstance(output, dict) and 'email' in output:\n        output = output.copy()\n        output['email'] = 'anonymous@example.com'\n    return output\n\n@traced(input_processor=mask_inputs, output_processor=anonymize_output)\ndef login(user, password):\n    # ...\n    return {\"email\": user + \"@example.com\"}\n</code></pre>"},{"location":"core/traced/#privacy-controls","title":"Privacy Controls","text":"<ul> <li>Set <code>hide_input=True</code> to prevent input data from being logged.</li> <li>Set <code>hide_output=True</code> to prevent output data from being logged.</li> </ul> <pre><code>@traced(hide_input=True, hide_output=True)\ndef sensitive_operation(secret):\n    ...\n</code></pre>"},{"location":"core/traced/#supported-function-types","title":"Supported Function Types","text":"<ul> <li>Regular functions (sync/async)</li> <li>Generator functions (sync/async)</li> </ul>"},{"location":"core/traced/#example-with-plain-python-agents","title":"Example with plain python agents","text":"<p>When used with plain python agents please call <code>wait_for_tracers()</code> at the end of the script to ensure all traces are sent, if this is not called the agent could end without sending all the traces.</p> <pre><code>from uipath.tracing import traced, wait_for_tracers\n\n@traced(name=\"process_payment\", run_type=\"payment\", hide_input=True)\ndef process_payment(card_number, amount):\n    # Sensitive input will not be logged\n    return {\"status\": \"success\", \"amount\": amount}\n\n@traced()\ndef main():\n    process_payment()\n\ndef main_wait_traces():\n    try:\n        main()\n    finally:\n        # this needs to be called after the last `traced` function is done\n        # to ensure the trace associated with main is saved\n        wait_for_tracers()\n\nif __name__ == \"__main__\":\n    main_wait_traces()\n</code></pre>"},{"location":"core/traced/#example-with-langchain-agents","title":"Example with langchain agents","text":"<p>When using <code>uipath-langchain</code> there is no need to call wait_for_tracers our framework will ensure that is called.</p> <pre><code>@traced()\ndef my_custom_traced_function(input: str) -&gt; str:\n    return { \"x\": \"some-output\" }\n</code></pre> <p>You can also use <code>@traceable()</code> attribute from langchain, but we recommend using <code>@traced()</code> attribute instead.</p> <pre><code>@traceable()\n# @traced()  ---&gt; do not use both at the same time or it will duplicate spans.\ndef my_custom_traced_function(input: str) -&gt; str:\n    return { \"x\": \"some-output\" }\n</code></pre>"},{"location":"langchain/chat_models/","title":"Chat Models","text":"<p>UiPath provides two chat models <code>UiPathAzureChatOpenAI</code> and <code>UiPathChat</code>. These are compatible with LangGraph as drop in replacements. You do not need to add tokens from OpenAI or Anthropic, usage of these chat models will consume <code>Agent Units</code> on your account.</p>"},{"location":"langchain/chat_models/#uipathazurechatopenai","title":"UiPathAzureChatOpenAI","text":"<p><code>UiPathAzureChatOpenAI</code> can be used as a drop in replacement for <code>ChatOpenAI</code> or <code>AzureChatOpenAI</code>.</p>"},{"location":"langchain/chat_models/#example-usage","title":"Example usage","text":"<p>Here is a code that is using <code>ChatOpenAI</code></p> <pre><code>from langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(\n    model=\"gpt-4o\",\n    temperature=0,\n    max_tokens=4000,\n    timeout=30,\n    max_retries=2,\n    # api_key=\"...\",  # if you prefer to pass api key in directly instead of using env vars\n    # base_url=\"...\",\n    # organization=\"...\",\n    # other params...\n)\n</code></pre> <p>You can simply change <code>ChatOpenAi</code> with <code>UiPathAzureChatOpenAI</code>, you don't have to provide an OpenAI token.</p> <pre><code>from uipath_langchain.chat.models import UiPathAzureChatOpenAI\n\nllm = UiPathAzureChatOpenAI(\n    model=\"gpt-4o-2024-08-06\",\n    temperature=0,\n    max_tokens=4000,\n    timeout=30,\n    max_retries=2,\n    # other params...\n)\n</code></pre> <p>Currently, the following models can be used with <code>UiPathAzureChatOpenAI</code> (this list can be updated in the future):</p> <ul> <li><code>gpt-4</code>, <code>gpt-4-1106-Preview</code>, <code>gpt-4-32k</code>, <code>gpt-4-turbo-2024-04-09</code>, <code>gpt-4-vision-preview</code>, <code>gpt-4o-2024-05-13</code>, <code>gpt-4o-2024-08-06</code>, <code>gpt-4o-mini-2024-07-18</code>, <code>o3-mini-2025-01-31</code></li> </ul>"},{"location":"langchain/chat_models/#uipathchat","title":"UiPathChat","text":"<p><code>UiPathChat</code> is a more versatile class that can suport models from diferent vendors including OpenAI.</p>"},{"location":"langchain/chat_models/#example-usage_1","title":"Example usage","text":"<p>Given the following code:</p> <pre><code>from langchain_anthropic import ChatAnthropic\n\nllm = ChatAnthropic(\n    model=\"claude-3-5-sonnet-20240620\",\n    temperature=0,\n    max_tokens=1024,\n    timeout=None,\n    max_retries=2,\n    # other params...\n)\n</code></pre> <p>You can replace it with <code>UiPathChat</code> like so:</p> <pre><code>from uipath_langchain.chat.models import UiPathChat\n\nllm = UiPathChat(\n    model=\"anthropic.claude-3-opus-20240229-v1:0\",\n    temperature=0,\n    max_tokens=1024,\n    timeout=None,\n    max_retries=2,\n    # other params...\n)\n</code></pre> <p>Currently the following models can be used with <code>UiPathChat</code> (this list can be updated in the future):</p> <ul> <li><code>anthropic.claude-3-5-sonnet-20240620-v1:0</code>, <code>anthropic.claude-3-5-sonnet-20241022-v2:0</code>, <code>anthropic.claude-3-7-sonnet-20250219-v1:0</code>, <code>anthropic.claude-3-haiku-20240307-v1:0</code>, <code>gemini-1.5-pro-001</code>, <code>gemini-2.0-flash-001</code>, <code>gpt-4o-2024-05-13</code>, <code>gpt-4o-2024-08-06</code>, <code>gpt-4o-2024-11-20</code>, <code>gpt-4o-mini-2024-07-18</code>, <code>o3-mini-2025-01-31</code></li> </ul> <p>Warning</p> <p>Please note that you may get errors related to data residency, as some models are not available on all regions.</p> <p>Example: <code>[Enforced Region] No model configuration found for product uipath-python-sdk in EU using model anthropic.claude-3-opus-20240229-v1:0</code>.</p>"},{"location":"langchain/context_grounding/","title":"Context Grounding","text":"<p>Context Grounding Service allows you to:</p> <ul> <li>Search through indexed documents using natural language queries</li> <li>Ground LLM responses in your organization's specific information</li> <li>Retrieve context-relevant documents for various applications</li> </ul> <p>You will need to create an index in <code>Context Grounding</code> to use this feature. To create an index go to organization <code>Orchestrator</code> -&gt; the folder where you'd like to create an index -&gt; <code>Indexes</code>. There you can create a new index from a storage bucket which you've added documents to. See the full documentation here for more details.</p>"},{"location":"langchain/context_grounding/#contextgroundingretriever","title":"ContextGroundingRetriever","text":"<p>The <code>ContextGroundingRetriever</code> is a document retrieval system that uses vector search to efficiently find and retrieve relevant information from your document store.</p>"},{"location":"langchain/context_grounding/#basic-usage","title":"Basic Usage","text":"<p>Create a simple retriever by specifying an index name:</p> <pre><code>from uipath_langchain.retrievers import ContextGroundingRetriever\n\nretriever = ContextGroundingRetriever(index_name = \"Company Policy Context\")\nprint(retriever.invoke(\"What is the company policy on remote work?\"))\n</code></pre>"},{"location":"langchain/context_grounding/#integration-with-langchain-tools","title":"Integration with LangChain Tools","text":"<p>You can easily integrate the retriever with LangChain's tool system:</p> <pre><code>from langchain.agents import create_react_agent\nfrom langchain.tools.retriever import create_retriever_tool\nfrom uipath_langchain.retrievers import ContextGroundingRetriever\n\nretriever = ContextGroundingRetriever(index_name = \"Company Policy Context\")\nretriever_tool = create_retriever_tool(\n    retriever,\n    \"ContextforInvoiceDisputeInvestigation\",\n   \"\"\"\n   Use this tool to search the company internal documents for information about policies around dispute resolution.\n   Use a meaningful query to load relevant information from the documents. Save the citation for later use.\n   \"\"\"\n)\n\n# You can use the tool in your agents\nmodel = OpenAI()\ntools = [retriever_tool]\nagent = create_react_agent(model, tools, prompt=\"Answer user questions as best as you can using the search tool.\")\n</code></pre>"},{"location":"langchain/context_grounding/#advanced-usage","title":"Advanced Usage","text":"<p>For complex applications, the retriever can be combined with other LangChain components to create robust document QA systems, agents, or knowledge bases.</p>"},{"location":"langchain/context_grounding/#contextgroundingvectorstore","title":"ContextGroundingVectorStore","text":"<p><code>ContextGroundingVectorStore</code> is a vector store implementation designed for context-aware document retrieval. It allows you to perform semantic searches and create retrieval chains with language models.</p>"},{"location":"langchain/context_grounding/#searching-documents","title":"Searching Documents","text":"<p>The vector store supports various search methods:</p> <pre><code>from uipath_langchain.vectorstores.context_grounding_vectorstore import ContextGroundingVectorStore\n\nvectorstore = ContextGroundingVectorStore(index_name=\"Company policy\")\n\n# Perform semantic searches with distance scores\ndocs_with_scores = vectorstore.asimilarity_search_with_score(query=\"What is the company policy on data storage?\", k=5)\n\n# Perform a similarity search with relevance scores\ndocs_with_relevance_scores = await vectorstore.asimilarity_search_with_relevance_scores(query=query, k=5)\n</code></pre>"},{"location":"langchain/context_grounding/#creating-a-retrieval-chain","title":"Creating a Retrieval Chain","text":"<p>You can integrate the vector store into a retrieval chain with a language model:</p> <pre><code># Run a retrieval chain\nmodel = UiPathAzureChatOpenAI(model=\"gpt-4o-2024-08-06\", max_retries=3)\nretrieval_chain = create_retrieval_chain(vectorstore=vectorstore, model=model)\n\nquery = \"What is the ECCN for a laptop?\"\nresult = retrieval_chain(query)\n</code></pre>"},{"location":"langchain/human_in_the_loop/","title":"Human In The Loop","text":"<p>Guide for Human-In-The-Loop scenarios within the UiPath-Langchain integration. It focuses on the interrupt(model) functionality, illustrating its role as a symbolic representation of an agent's wait state within the LangGraph framework.</p>"},{"location":"langchain/human_in_the_loop/#models-overview","title":"Models Overview","text":""},{"location":"langchain/human_in_the_loop/#1-createaction","title":"1. CreateAction","text":"<p>The <code>CreateAction</code> model is utilized to create an escalation action within the UiPath Action Center as part of an interrupt context. The action will rely on a previously created UiPath app. After addressing the escalation, the current agent will resume execution. For more information on UiPath apps, refer to the UiPath Apps User Guide.</p>"},{"location":"langchain/human_in_the_loop/#attributes","title":"Attributes:","text":"<ul> <li>name (Optional[str]): The name of the app.</li> <li>key (Optional[str]): The key of the app.</li> <li>title (str): The title of the action to create.</li> <li>data (Optional[Dict[str, Any]]): Values that the action will be populated with.</li> <li>app_version (Optional[int]): The version of the app (defaults to 1).</li> <li>assignee (Optional[str]): The username or email of the person assigned to handle the escalation.</li> </ul>"},{"location":"langchain/human_in_the_loop/#example","title":"Example:","text":"<pre><code>from uipath.models import CreateAction\naction_output = interrupt(CreateAction(name=\"AppName\", title=\"Escalate Issue\", data={\"key\": \"value\"}, app_version=1, assignee=\"user@example.com\"))\n</code></pre> <p>For a practical implementation of the <code>CreateAction</code> model, refer to the ticket-classification sample. This sample demonstrates how to create an action with dynamic input.</p>"},{"location":"langchain/human_in_the_loop/#2-waitaction","title":"2. WaitAction","text":"<p>The <code>WaitAction</code> model is used to wait for an action to be handled. This model is intended for scenarios where the action has already been created.</p>"},{"location":"langchain/human_in_the_loop/#attributes_1","title":"Attributes:","text":"<ul> <li>action (Action): The instance of the action to wait for.</li> </ul>"},{"location":"langchain/human_in_the_loop/#example_1","title":"Example:","text":"<pre><code>from uipath.models import WaitAction\naction_output = interrupt(WaitAction(action=my_action_instance))\n</code></pre> <p>\ud83d\udca1The UiPath-LangChain SDK also supports Robot/Agent-in-the-loop scenarios. In this context, the execution of one agent can be suspended until another robot or agent finishes its execution.</p>"},{"location":"langchain/human_in_the_loop/#3-invokeprocess","title":"3. InvokeProcess","text":"<p>The <code>InvokeProcess</code> model is utilized to invoke a process within the UiPath cloud platform. This process can be of various types, including API workflows, Agents or RPA automation. Upon completion of the invoked process, the current agent will automatically resume execution.</p>"},{"location":"langchain/human_in_the_loop/#attributes_2","title":"Attributes:","text":"<ul> <li>name (str): The name of the process to invoke.</li> <li>input_arguments (Optional[Dict[str, Any]]): A dictionary containing the input arguments required for the invoked process.</li> </ul>"},{"location":"langchain/human_in_the_loop/#example_2","title":"Example:","text":"<pre><code>from uipath.models import InvokeProcess\nprocess_output = interrupt(InvokeProcess(name=\"MyProcess\", input_arguments={\"arg1\": \"value1\"}))\n</code></pre> <p>For a practical implementation of the <code>InvokeProcess</code> model, refer to the multi-agent-planner-researcher-coder-distributed sample. This sample demonstrates how to invoke a process with dynamic input arguments, showcasing the integration of the interrupt functionality within a multi-agent system or a system where an agent integrates with RPA processes and API workflows.</p>"},{"location":"langchain/human_in_the_loop/#4-waitjob","title":"4. WaitJob","text":"<p>The <code>WaitJob</code> model is used to wait for a job completion. Unlike <code>InvokeProcess</code>, which automatically creates a job, this model is intended for scenarios where the job has already been created.</p>"},{"location":"langchain/human_in_the_loop/#attributes_3","title":"Attributes:","text":"<ul> <li>job (Job): The instance of the job that the agent will wait for. This should be a valid job object that has been previously created.</li> </ul>"},{"location":"langchain/human_in_the_loop/#example_3","title":"Example:","text":"<pre><code>from uipath.models import WaitJob\njob_output = interrupt(WaitJob(job=my_job_instance))\n</code></pre>"},{"location":"langchain/quick_start/","title":"Quickstart Guide: UiPath LangChain Agents","text":""},{"location":"langchain/quick_start/#introduction","title":"Introduction","text":"<p>This guide provides step-by-step instructions for setting up, creating, publishing, and running your first UiPath-LangChain Agent.</p>"},{"location":"langchain/quick_start/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have the following installed:</p> <ul> <li>Python 3.10 or higher</li> <li><code>pip</code> or <code>uv</code> package manager</li> <li>A UiPath Automation Cloud account with appropriate permissions</li> <li>An Anthropic or OpenAI API key</li> </ul> <p>Info</p> <ol> <li> <p>Anthropic - Generate an Anthropic API key here.</p> </li> <li> <p>OpenAI - Generate an OpenAI API key here.</p> </li> </ol>"},{"location":"langchain/quick_start/#creating-a-new-project","title":"Creating a New Project","text":"<p>We recommend using <code>uv</code> for package management. To create a new project:</p> Linux, macOS, Windows BashWindows PowerShell mkdir examplecd example New-Item -ItemType Directory -Path exampleSet-Location example uvpip # Initialize a new uv project in the current directoryuv init . --python 3.10# Create a new virtual environment# By default, uv creates a virtual environment in a directory called .venvuv venvUsing CPython 3.10.16 interpreter at: [PATH]Creating virtual environment at: .venvActivate with: source .venv/bin/activate# Activate the virtual environment# For Windows PowerShell/ Windows CMD: .venv\\Scripts\\activate# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Install the langchain anthropic packageuv add langchain-anthropic# Install the uipath packageuv add uipath-langchain# Verify the uipath installationuipath -lvuipath-langchain version 0.0.100 # Create a new virtual environmentpython -m venv .venv# Activate the virtual environment# For Windows PowerShell: .venv\\Scripts\\Activate.ps1# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Upgrade pip to the latest versionpython -m pip install --upgrade pip# Install the langchain anthropic packagepip install langchain-anthropic# Install the uipath packagepip install uipath-langchain# Verify the uipath installationuipath -lvuipath-langchain version 0.0.100"},{"location":"langchain/quick_start/#create-your-first-uipath-agent","title":"Create Your First UiPath Agent","text":"<p>Generate your first UiPath LangChain agent:</p> uipath new my-agent\u280b Creating new agent my-agent in current directory ...\u2713  Created 'main.py' file.\u2713  Created 'langgraph.json' file.\u2713  Created 'pyproject.toml' file.\ud83d\udca1  Initialize project: uipath init\ud83d\udca1  Run agent: uipath run agent '{\"topic\": \"UiPath\"}' <p>This command creates the following files:</p> File Name Description <code>main.py</code> LangGraph agent code. <code>langgraph.json</code> LangGraph specific configuration file. <code>pyproject.toml</code> Project metadata and dependencies as per PEP 518."},{"location":"langchain/quick_start/#authenticate-with-uipath","title":"Authenticate With UiPath","text":"uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful."},{"location":"langchain/quick_start/#initialize-project","title":"Initialize Project","text":"uipath init\u280b Initializing UiPath project ...\u2713   Created '.env' file.\u2713   Created 'agent.mermaid' file.\u2713   Created 'uipath.json' file. <p>This command creates the following files:</p> File Name Description <code>.env</code> Environment variables and secrets (this file will not be packed &amp; published). <code>uipath.json</code> Input/output JSON schemas and bindings. <code>agent.mermaid</code> Graph visual representation."},{"location":"langchain/quick_start/#set-up-environment-variables","title":"Set Up Environment Variables","text":"<p>Before running the agent, configure either <code>OPENAI_API_KEY</code> or <code>ANTHROPIC_API_KEY</code> in the <code>.env</code> file:</p> Open AIANTHROPIC_API_KEY <pre><code>OPENAI_API_KEY=sk-proj-......\n</code></pre> <pre><code>ANTHROPIC_API_KEY=sk-ant-a.....\n</code></pre>"},{"location":"langchain/quick_start/#run-the-agent-locally","title":"Run The Agent Locally","text":"<p>Execute the agent with a sample input:</p> uipath run agent '{\"topic\": \"UiPath\"}'[2025-04-29 12:31:57,756][INFO] ((), {'topic': 'UiPath'})[2025-04-29 12:32:07,689][INFO] ((), {'topic': 'UiPath', 'report': \"...\"}) <p>This command runs your agent locally and displays the report in the standard output.</p> <p>Warning</p> <p>Depending on the shell you are using, it may be necessary to escape the input json:</p> Bash/ZSH/PowerShellWindows CMDWindows PowerShell <pre><code>uipath run agent '{\"topic\": \"UiPath\"}'\n</code></pre> <pre><code>uipath run agent \"{\"\"topic\"\": \"\"UiPath\"\"}\"\n</code></pre> <pre><code>uipath run agent '{\\\"topic\\\":\\\"uipath\\\"}'\n</code></pre> <p>Attention</p> <p>For a shell agnostic option, please refer to the next section.</p>"},{"location":"langchain/quick_start/#optional-run-the-agent-with-a-json-file-as-input","title":"(Optional) Run The Agent with a json File as Input","text":"<p>The <code>run</code> command can also take a .json file as an input. You can create a file named <code>input.json</code> having the following content:</p> <pre><code>{\n  \"topic\": \"UiPath\"\n}\n</code></pre> <p>Use this file as agent input:</p> <pre><code>&gt; uipath run agent --file input.json\n</code></pre>"},{"location":"langchain/quick_start/#deploy-the-agent-to-uipath-automation-cloud","title":"Deploy the Agent to UiPath Automation Cloud","text":"<p>Follow these steps to publish and run your agent to UiPath Automation Cloud:</p>"},{"location":"langchain/quick_start/#optional-customize-the-package","title":"(Optional) Customize the Package","text":"<p>Update author details in <code>pyproject.toml</code>:</p> <pre><code>authors = [{ name = \"Your Name\", email = \"your.name@example.com\" }]\n</code></pre>"},{"location":"langchain/quick_start/#package-your-project","title":"Package Your Project","text":"uipath pack\u280b Packaging project ...Name       : testVersion    : 0.1.0Description: Add your description hereAuthors    : Your Name\u2713  Project successfully packaged."},{"location":"langchain/quick_start/#publish-to-my-workspace","title":"Publish To My Workspace","text":"uipath publish --my-workspace\u2819 Publishing most recent package: my-agent.0.0.1.nupkg ...\u2713  Package published successfully!\u2826 Getting process information ...\ud83d\udd17 Process configuration link: [LINK]\ud83d\udca1 Use the link above to configure any environment variables <p>Info</p> <p>Please note that a process will be auto-created only upon publishing to my-workspace package feed.</p> <p>Set the environment variables using the provided link:</p> <p> </p>"},{"location":"langchain/quick_start/#invoke-the-agent-on-uipath-automation-cloud","title":"Invoke the Agent on UiPath Automation Cloud","text":"uipath invoke agent '{\"topic\": \"UiPath\"}'\u2834 Loading configuration ...\u2834 Starting job ...\u2728 Job started successfully!\ud83d\udd17 Monitor your job here: [LINK] <p>Use the provided link to monitor your job and view detailed traces.</p> <p> </p>"},{"location":"langchain/quick_start/#optional-invoke-the-agent-with-a-json-file-as-input","title":"(Optional) Invoke The Agent with a json File as Input","text":"<p>The <code>invoke</code> command operates similarly to the <code>run</code> command, allowing you to use the same .json file defined in the (Optional) Run the agent with a .json file as input section, as agent input:</p> <pre><code>&gt; uipath invoke agent --file input.json\n</code></pre>"},{"location":"langchain/quick_start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have successfully set up, created, published, and run a UiPath LangChain Agent. \ud83d\ude80</p> <p>For more advanced agents and agent samples, please refer to our samples section in GitHub.</p>"},{"location":"llamaindex/context_grounding/","title":"Context Grounding","text":"<p>Context Grounding Service allows you to:</p> <ul> <li>Search through indexed documents using natural language queries</li> <li>Ground LLM responses in your organization's specific information</li> <li>Retrieve context-relevant documents for various applications</li> </ul> <p>You will need to create an index in <code>Context Grounding</code> to use this feature. To create an index go to organization <code>Orchestrator</code> -&gt; the folder where you'd like to create an index -&gt; <code>Indexes</code>. There you can create a new index from a storage bucket which you've added documents to. See the full documentation here for more details.</p>"},{"location":"llamaindex/context_grounding/#contextgroundingretriever","title":"ContextGroundingRetriever","text":"<p>The <code>ContextGroundingRetriever</code> is a document retrieval system that uses vector search to efficiently find and retrieve relevant information from your document store.</p>"},{"location":"llamaindex/context_grounding/#basic-usage","title":"Basic Usage","text":"<p>Create a simple retriever by specifying an index name:</p> <pre><code>from uipath_llamaindex.retrievers import ContextGroundingRetriever\n\nretriever = ContextGroundingRetriever(index_name = \"Company Policy Context\")\nprint(retriever.retrieve(\"What is the company policy on remote work?\"))\n</code></pre>"},{"location":"llamaindex/context_grounding/#contextgroundingqueryengine","title":"ContextGroundingQueryEngine","text":"<p>Query engines are interfaces that allows you to ask question over your data. The <code>ContextGroundingQueryEngine</code> is a query engine system that leverages the <code>ContextGroundingRetriever</code>.</p>"},{"location":"llamaindex/context_grounding/#basic-usage_1","title":"Basic Usage","text":"<p>Create a simple query engine by specifying an index name and a synthesizer strategy:</p> <pre><code>from uipath_llamaindex.query_engines import ContextGroundingQueryEngine\nfrom llama_index.core.response_synthesizers.type import ResponseMode\nfrom llama_index.core import get_response_synthesizer\n\nsynthesizer = get_response_synthesizer(ResponseMode.SIMPLE_SUMMARIZE)\nquery_engine = ContextGroundingQueryEngine(index_name = \"Company Policy Context\", response_synthesizer=synthesizer)\nprint(query_engine.query(\"What is the company policy on remote work?\"))\n</code></pre>"},{"location":"llamaindex/context_grounding/#integration-with-llamaindex-tools","title":"Integration with LlamaIndex Tools","text":"<p>You can easily integrate the query engine with LlamaIndex's tool system:</p> <pre><code>from uipath_llamaindex.query_engines import ContextGroundingQueryEngine\nfrom llama_index.core.response_synthesizers.type import ResponseMode\nfrom llama_index.core import get_response_synthesizer\n\nquery_engine = ContextGroundingQueryEngine(\n    index_name=\"Company Policy Context\",\n    response_synthesizer=get_response_synthesizer(ResponseMode.REFINE),\n)\nquery_engine_tools = [QueryEngineTool(\n            query_engine=query_engine,\n            metadata=ToolMetadata(\n                name=\"Company policy\",\n                description=\"Information about general company policy\",\n            )\n        )]\n# You can use the tool in your agents\nreact_agent = ReActAgent.from_tools(query_engine_tools)\nresponse = react_agent.chat(\"Answer user questions as best as you can using the query engine tool.\")\n</code></pre> <p>Tip</p> <p>Check our travel-helper-RAG-agent sample to see context grounding query engines in action.</p>"},{"location":"llamaindex/human_in_the_loop/","title":"Human In The Loop","text":"<p>Guide for Human-In-The-Loop scenarios within the UiPath-LlamaIndex integration. It focuses on the ctx.write_event_to_stream LlamaIndex functionality.</p>"},{"location":"llamaindex/human_in_the_loop/#models-overview","title":"Models Overview","text":""},{"location":"llamaindex/human_in_the_loop/#1-createaction","title":"1. CreateAction","text":"<p>The <code>CreateAction</code> model is utilized to create an escalation action within the UiPath Action Center as part of an interrupt context. The action will rely on a previously created UiPath app. After addressing the escalation, the current agent will resume execution. For more information on UiPath apps, refer to the UiPath Apps User Guide.</p>"},{"location":"llamaindex/human_in_the_loop/#attributes","title":"Attributes:","text":"<ul> <li>app_name (Optional[str]): The name of the app.</li> <li>app_folder_path (Optional[str]): The folder path of the app.</li> <li>app_key (Optional[str]): The key of the app.</li> <li>title (str): The title of the action to create.</li> <li>data (Optional[Dict[str, Any]]): Values that the action will be populated with.</li> <li>app_version (Optional[int]): The version of the app (defaults to 1).</li> <li>assignee (Optional[str]): The username or email of the person assigned to handle the escalation.</li> </ul>"},{"location":"llamaindex/human_in_the_loop/#example","title":"Example:","text":"<pre><code>from uipath_llamaindex.models import CreateActionEvent\naction_output = ctx.write_event_to_stream(CreateActionEvent(app_name=\"AppName\", app_folder_path=\"MyFolderPath\", title=\"Escalate Issue\", data={\"key\": \"value\"}, app_version=1, assignee=\"user@example.com\"))\n</code></pre> <p>For a practical implementation of the <code>CreateAction</code> model, refer to the action-center-hitl-agent. This sample demonstrates how to create an action with dynamic input.</p>"},{"location":"llamaindex/human_in_the_loop/#2-waitaction","title":"2. WaitAction","text":"<p>The <code>WaitAction</code> model is used to wait for an action to be handled. This model is intended for scenarios where the action has already been created.</p>"},{"location":"llamaindex/human_in_the_loop/#attributes_1","title":"Attributes:","text":"<ul> <li>action (Action): The instance of the action to wait for.</li> <li>app_folder_path (Optional[str]): The folder path of the app.</li> </ul>"},{"location":"llamaindex/human_in_the_loop/#example_1","title":"Example:","text":"<pre><code>from uipath_llamaindex.models import WaitActionEvent\naction_output = ctx.write_event_to_stream(WaitActionEvent(action=my_action_instance, app_folder_path=\"MyFolderPath\"))\n</code></pre> <p>\ud83d\udca1 UiPath LlamaIndex sdk also supports Robot/Agent-in-the-loop scenarios. In this context, the execution of one agent can be suspended until another robot or agent finishes its execution.</p>"},{"location":"llamaindex/human_in_the_loop/#3-invokeprocess","title":"3. InvokeProcess","text":"<p>The <code>InvokeProcess</code> model is utilized to invoke a process within the UiPath cloud platform. This process can be of various types, including API workflows, Agents or RPA automation. Upon completion of the invoked process, the current agent will automatically resume execution.</p>"},{"location":"llamaindex/human_in_the_loop/#attributes_2","title":"Attributes:","text":"<ul> <li>name (str): The name of the process to invoke.</li> <li>process_folder_path (Optional[str]): The folder path of the process.</li> <li>input_arguments (Optional[Dict[str, Any]]): A dictionary containing the input arguments required for the invoked process.</li> </ul>"},{"location":"llamaindex/human_in_the_loop/#example_2","title":"Example:","text":"<pre><code>from uipath_llamaindex.models import InvokeProcessEvent\nprocess_output = ctx.write_event_to_stream(InvokeProcessEvent(name=\"MyProcess\", process_folder_path=\"MyFolderPath\", input_arguments={\"arg1\": \"value1\"}))\n</code></pre> <p>Warning</p> <p>An agent can invoke itself if needed, but this must be done with caution. Be mindful that using the same name for invocation may lead to unintentional loops. To prevent recursion issues, implement safeguards like exit conditions.</p> <p>For a practical implementation of the <code>InvokeProcess</code> model, refer to the multi-agent sample. This sample demonstrates how to invoke a process with dynamic input arguments, showcasing the integration of the interrupt functionality within a multi-agent system or a system where an agent integrates with RPA processes and API workflows.</p>"},{"location":"llamaindex/human_in_the_loop/#4-waitjob","title":"4. WaitJob","text":"<p>The <code>WaitJob</code> model is used to wait for a job completion. Unlike <code>InvokeProcess</code>, which automatically creates a job, this model is intended for scenarios where the job has already been created.</p>"},{"location":"llamaindex/human_in_the_loop/#attributes_3","title":"Attributes:","text":"<ul> <li>job (Job): The instance of the job that the agent will wait for. This should be a valid job object that has been previously created.</li> <li>process_folder_path (Optional[str]): The folder path of the process.</li> </ul>"},{"location":"llamaindex/human_in_the_loop/#example_3","title":"Example:","text":"<pre><code>from uipath_llamaindex.models import WaitJobEvent\njob_output = ctx.write_event_to_stream(WaitJobEvent(job=my_job_instance, process_folder_path=\"MyFolderPath\"))\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/","title":"LLMs and Embeddings","text":"<p>UiPath provides pre-configured LLM and embedding classes that handle authentication, routing, and configuration automatically, allowing you to focus on building your agents. You do not need to add tokens from OpenAI, usage of these models will consume <code>Agent Units</code> on your account.</p>"},{"location":"llamaindex/llms_and_embeddings/#uipathopenai","title":"UiPathOpenAI","text":"<p>The <code>UiPathOpenAI</code> class is a pre-configured Azure OpenAI client that routes requests through UiPath.</p>"},{"location":"llamaindex/llms_and_embeddings/#available-models","title":"Available Models","text":"<p>The following OpenAI models are available through the <code>OpenAIModel</code> enum:</p> <ul> <li><code>GPT_4_1_2025_04_14</code></li> <li><code>GPT_4_1_MINI_2025_04_14</code></li> <li><code>GPT_4_1_NANO_2025_04_14</code></li> <li><code>GPT_4O_2024_05_13</code></li> <li><code>GPT_4O_2024_08_06</code></li> <li><code>GPT_4O_2024_11_20</code></li> <li><code>GPT_4O_MINI_2024_07_18</code> (default)</li> <li><code>O3_MINI_2025_01_31</code></li> <li><code>TEXT_DAVINCI_003</code></li> </ul>"},{"location":"llamaindex/llms_and_embeddings/#basic-usage","title":"Basic Usage","text":"<pre><code>from uipath_llamaindex.llms import UiPathOpenAI\nfrom llama_index.core.llms import ChatMessage\n\n# Create an LLM instance with default settings\nllm = UiPathOpenAI()\n\n# Create chat messages\nmessages = [\n    ChatMessage(\n        role=\"system\", content=\"You are a pirate with colorful personality.\"\n    ),\n    ChatMessage(role=\"user\", content=\"Hello\"),\n]\n\n# Generate a response\nresponse = llm.chat(messages)\nprint(response)\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/#custom-model-configuration","title":"Custom Model Configuration","text":"<pre><code>from uipath_llamaindex.llms import UiPathOpenAI, OpenAIModel\n\n# Use a specific model\nllm = UiPathOpenAI(model=OpenAIModel.GPT_4O_2024_11_20)\n\n# Or use a model string directly\nllm = UiPathOpenAI(model=\"gpt-4o-2024-11-20\")\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/#uipathopenaiembedding","title":"UiPathOpenAIEmbedding","text":"<p>The <code>UiPathOpenAIEmbedding</code> class provides text embedding capabilities using OpenAI's embedding models through UiPath.</p>"},{"location":"llamaindex/llms_and_embeddings/#available-embedding-models","title":"Available Embedding Models","text":"<p>The following embedding models are available through the <code>OpenAIEmbeddingModel</code> enum:</p> <ul> <li><code>TEXT_EMBEDDING_ADA_002</code> (default)</li> <li><code>TEXT_EMBEDDING_3_LARGE</code></li> </ul>"},{"location":"llamaindex/llms_and_embeddings/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from uipath_llamaindex.embeddings import UiPathOpenAIEmbedding\n\n# Create an embedding model instance\nembed_model = UiPathOpenAIEmbedding()\n\n# Get embeddings for a single text\nresult = embed_model.get_text_embedding(\"the quick brown fox jumps over the lazy dog\")\nprint(f\"Embedding dimension: {len(result)}\")\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/#batch-embeddings","title":"Batch Embeddings","text":"<pre><code>from uipath_llamaindex.embeddings import UiPathOpenAIEmbedding\n\nembed_model = UiPathOpenAIEmbedding()\n\n# Get embeddings for multiple texts\ntexts = [\n    \"Hello world\",\n    \"How are you?\",\n    \"This is a test\"\n]\n\nembeddings = embed_model.get_text_embedding_batch(texts)\nprint(f\"Number of embeddings: {len(embeddings)}\")\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/#integration-with-llamaindex","title":"Integration with LlamaIndex","text":"<p>Both classes integrate seamlessly with LlamaIndex components:</p>"},{"location":"llamaindex/llms_and_embeddings/#using-with-agents","title":"Using with Agents","text":"<pre><code>import asyncio\nfrom llama_index.core.agent.workflow import ReActAgent\nfrom uipath_llamaindex.llms import UiPathOpenAI, OpenAIModel\n\ndef multiply(a: int, b: int) -&gt; int:\n    \"\"\"Multiply two integers and returns the result integer\"\"\"\n    return a * b\n\n\ndef add(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers and returns the result integer\"\"\"\n    return a + b\n\n# Create agent with UiPath LLM\nagent = ReActAgent(\n    tools=[multiply, add],\n    llm=UiPathOpenAI(model=OpenAIModel.GPT_4O_2024_11_20))\n\nasync def main():\n    handler = agent.run(\"What is 2+(2*4)?\")\n    response = await handler\n\nasyncio.run(main())\n</code></pre>"},{"location":"llamaindex/llms_and_embeddings/#using-with-vectorstoreindex","title":"Using with VectorStoreIndex","text":"<pre><code>from llama_index.core import VectorStoreIndex, Document\nfrom uipath_llamaindex.llms import UiPathOpenAI\nfrom uipath_llamaindex.embeddings import UiPathOpenAIEmbedding\n\n# Create documents\ndocuments = [\n    Document(text=\"This is a sample document about artificial intelligence.\"),\n    Document(text=\"Machine learning is a subset of AI that focuses on algorithms.\"),\n]\n\n# Create index with UiPath models\nindex = VectorStoreIndex.from_documents(\n    documents,\n    embed_model=UiPathOpenAIEmbedding()\n)\n\n# Create query engine with UiPath LLM\nquery_engine = index.as_query_engine(\n    llm=UiPathOpenAI(model=OpenAIModel.GPT_4O_2024_11_20)\n)\n\nresponse = query_engine.query(\"What is machine learning?\")\n</code></pre> <p>Warning</p> <p>Please note that you may get errors related to data residency, as some models are not available on all regions.</p> <p>Example: <code>[Enforced Region] No model configuration found for product uipath-python-sdk in EU</code>.</p>"},{"location":"llamaindex/quick_start/","title":"Quickstart Guide: UiPath LlamaIndex Agents","text":""},{"location":"llamaindex/quick_start/#introduction","title":"Introduction","text":"<p>This guide provides step-by-step instructions for setting up, creating, publishing, and running your first UiPath-LlamaIndex Agent.</p>"},{"location":"llamaindex/quick_start/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have the following installed:</p> <ul> <li>Python 3.10 or higher</li> <li><code>pip</code> or <code>uv</code> package manager</li> <li>A UiPath Automation Cloud account with appropriate permissions</li> <li>An OpenAI API key</li> </ul> <p>Info</p> <p>OpenAI - Generate an OpenAI API key here.</p>"},{"location":"llamaindex/quick_start/#creating-a-new-project","title":"Creating a New Project","text":"<p>We recommend using <code>uv</code> for package management. To create a new project:</p> Linux, macOS, Windows BashWindows PowerShell mkdir examplecd example New-Item -ItemType Directory -Path exampleSet-Location example uvpip # Initialize a new uv project in the current directoryuv init . --python 3.10# Create a new virtual environment# By default, uv creates a virtual environment in a directory called .venvuv venvUsing CPython 3.10.16 interpreter at: [PATH]Creating virtual environment at: .venvActivate with: source .venv/bin/activate# Activate the virtual environment# For Windows PowerShell/ Windows CMD: .venv\\Scripts\\activate# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Install the uipath packageuv add uipath-llamaindex # Create a new virtual environmentpython -m venv .venv# Activate the virtual environment# For Windows PowerShell: .venv\\Scripts\\Activate.ps1# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Upgrade pip to the latest versionpython -m pip install --upgrade pip# Install the uipath packagepip install uipath-llamaindex"},{"location":"llamaindex/quick_start/#create-your-first-uipath-agent","title":"Create Your First UiPath Agent","text":"<p>Generate your first UiPath LlamaIndex agent:</p> uipath new my-agent\u280b Creating new agent my-agent in current directory ...\u2713  Created 'main.py' file.\u2713  Created 'llama_index.json' file.\u2713  Created 'pyproject.toml' file.\ud83d\udd27  Please ensure to define OPENAI_API_KEY in your .env file.\ud83d\udca1  Initialize project: uipath init\ud83d\udca1  Run agent: uipath run agent '{\"topic\": \"UiPath\"}' <p>This command creates the following files:</p> File Name Description <code>main.py</code> LlamaIndex agent code. <code>llama_index.json</code> LlamaIndex specific configuration file. <code>pyproject.toml</code> Project metadata and dependencies as per PEP 518."},{"location":"llamaindex/quick_start/#initialize-project","title":"Initialize Project","text":"uipath init\u280b Initializing UiPath project ...\u2713   Created '.env' file.\u2713   Created 'agent.mermaid' file.\u2713   Created 'uipath.json' file. <p>This command creates the following files:</p> File Name Description <code>.env</code> Environment variables and secrets (this file will not be packed &amp; published). <code>uipath.json</code> Input/output JSON schemas and bindings. <code>agent.mermaid</code> Graph visual representation."},{"location":"llamaindex/quick_start/#set-up-environment-variables","title":"Set Up Environment Variables","text":"<p>Before running the agent, configure <code>OPENAI_API_KEY</code> in the <code>.env</code> file:</p> Open AI <pre><code>OPENAI_API_KEY=sk-proj-......\n</code></pre>"},{"location":"llamaindex/quick_start/#authenticate-with-uipath","title":"Authenticate With UiPath","text":"uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful."},{"location":"llamaindex/quick_start/#run-the-agent-locally","title":"Run The Agent Locally","text":"<p>Execute the agent with a sample input:</p> uipath run agent '{\"topic\": \"UiPath\"}'{'joke': 'Why did the UiPath robot go to therapy? \\nBecause it had too many unresolved workflows!', 'critique': \"Analysis:\\nThis joke plays on the concept of therapy and unresolved issues, but applies it to a UiPath robot, which is a software automation tool used in businesses. The joke cleverly incorporates the idea of workflows, which are sequences of automated tasks that the robot performs, as the source of the robot's need for therapy.\\n\\nCritique:\\n- Clever wordplay: The joke is clever in its use of wordplay, as it takes a common phrase related to therapy and applies it in a humorous way to a robot and its workflows. This adds an element of surprise and wit to the joke.\\n- Relevant to the audience: The joke is likely to resonate with those familiar with UiPath or other automation tools, as they will understand the reference to workflows and the challenges that can arise from managing them.\\n- Lack of depth: While the joke is amusing on the surface, it may lack depth or complexity compared to more nuanced humor. Some may find it to be a simple play on words rather than a joke with deeper layers of meaning.\\n- Limited appeal: The joke's humor may be limited to a specific audience who are familiar with automation tools and workflows, potentially excluding those who are not familiar with these concepts.\\n\\nOverall, the joke is a clever play on words that will likely resonate with those in the automation industry, but may not have broad appeal beyond that specific audience.\"}\u2713  Successful execution. <p>This command runs your agent locally and displays the report in the standard output.</p> <p>Warning</p> <p>Depending on the shell you are using, it may be necessary to escape the input json:</p> Bash/ZSH/PowerShellWindows CMDWindows PowerShell <pre><code>uipath run agent '{\"topic\": \"UiPath\"}'\n</code></pre> <pre><code>uipath run agent \"{\"\"topic\"\": \"\"UiPath\"\"}\"\n</code></pre> <pre><code>uipath run agent '{\\\"topic\\\":\\\"uipath\\\"}'\n</code></pre> <p>Attention</p> <p>For a shell agnostic option, please refer to the next section.</p>"},{"location":"llamaindex/quick_start/#optional-run-the-agent-with-a-json-file-as-input","title":"(Optional) Run The Agent with a json File as Input","text":"<p>The <code>run</code> command can also take a .json file as an input. You can create a file named <code>input.json</code> having the following content:</p> <pre><code>{\n  \"topic\": \"UiPath\"\n}\n</code></pre> <p>Use this file as agent input:</p> <pre><code>&gt; uipath run agent --file input.json\n</code></pre>"},{"location":"llamaindex/quick_start/#deploy-the-agent-to-uipath-automation-cloud","title":"Deploy the Agent to UiPath Automation Cloud","text":"<p>Follow these steps to publish and run your agent to UiPath Automation Cloud:</p>"},{"location":"llamaindex/quick_start/#optional-customize-the-package","title":"(Optional) Customize the Package","text":"<p>Update author details in <code>pyproject.toml</code>:</p> <pre><code>authors = [{ name = \"Your Name\", email = \"your.name@example.com\" }]\n</code></pre>"},{"location":"llamaindex/quick_start/#package-your-project","title":"Package Your Project","text":"uipath pack\u280b Packaging project ...Name       : testVersion    : 0.1.0Description: Add your description hereAuthors    : Your Name\u2713  Project successfully packaged."},{"location":"llamaindex/quick_start/#publish-to-my-workspace","title":"Publish To My Workspace","text":"uipath publish --my-workspace\u2819 Publishing most recent package: my-agent.0.0.1.nupkg ...\u2713  Package published successfully!\u2826 Getting process information ...\ud83d\udd17 Process configuration link: [LINK]\ud83d\udca1 Use the link above to configure any environment variables <p>Info</p> <p>Please note that a process will be auto-created only upon publishing to my-workspace package feed.</p> <p>Set the environment variables using the provided link:</p> <p> </p>"},{"location":"llamaindex/quick_start/#invoke-the-agent-on-uipath-automation-cloud","title":"Invoke the Agent on UiPath Automation Cloud","text":"uipath invoke agent '{\"topic\": \"UiPath\"}'\u2834 Loading configuration ...\u2834 Starting job ...\u2728 Job started successfully!\ud83d\udd17 Monitor your job here: [LINK] <p>Use the provided link to monitor your job and view detailed traces.</p> <p> </p>"},{"location":"llamaindex/quick_start/#optional-invoke-the-agent-with-a-json-file-as-input","title":"(Optional) Invoke The Agent with a json File as Input","text":"<p>The <code>invoke</code> command operates similarly to the <code>run</code> command, allowing you to use the same .json file defined in the (Optional) Run the agent with a .json file as input section, as agent input:</p> <pre><code>&gt; uipath invoke agent --file input.json\n</code></pre>"},{"location":"llamaindex/quick_start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have successfully set up, created, published, and run a UiPath LlamaIndex Agent. \ud83d\ude80</p> <p>For more advanced agents and agent samples, please refer to our samples section in GitHub.</p>"},{"location":"mcp/how_to_pack_binary/","title":"How To Pack Binary","text":"<p>This guide explains how to manually package and publish the official GitHub MCP server to UiPath Orchestrator. For automation, see the example GitHub Actions workflow.</p> <p>Attention</p> <p>To build binary MCP servers locally, your environment must match UiPath's serverless runtime architecture (Ubuntu 64-bit AMD64). On other operating systems, use the GitHub Actions workflow described in the Automating with GitHub Actions section below.</p>"},{"location":"mcp/how_to_pack_binary/#prerequisites","title":"Prerequisites","text":"<ul> <li>UiPath Automation Cloud account</li> <li>UiPath personal access token</li> <li><code>go</code> (version 1.21+)</li> <li><code>python</code> (version 3.11+)</li> <li><code>uv</code> package manager (<code>pip install uv</code>)</li> </ul>"},{"location":"mcp/how_to_pack_binary/#steps","title":"Steps","text":""},{"location":"mcp/how_to_pack_binary/#1-clone-and-build-the-github-mcp-server","title":"1. Clone and Build the GitHub MCP Server","text":"# Clone the repositorygit clone https://github.com/github/github-mcp-server.gitcd github-mcp-server# Build the servercd cmd/github-mcp-servergo build"},{"location":"mcp/how_to_pack_binary/#2-create-package-directory","title":"2. Create Package Directory","text":"# Create package directory and copy executablemkdir -p mcp-packagecp github-mcp-server mcp-package/cd mcp-package"},{"location":"mcp/how_to_pack_binary/#3-create-configuration-files","title":"3. Create Configuration Files","text":"<p>Create the following files in the mcp-package directory:</p> <ol> <li> <p><code>mcp.json</code> - Server configuration: <pre><code>{\n  \"servers\": {\n    \"github\": {\n      \"command\": \"/bin/sh\",\n      \"args\": [\"-c\", \"chmod +x github-mcp-server &amp;&amp; ./github-mcp-server stdio\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"x\"\n      }\n    }\n  }\n}\n</code></pre></p> </li> <li> <p><code>pyproject.toml</code> - Project metadata: <pre><code>[project]\nname = \"mcp-github-server\"\nversion = \"0.0.1\"\ndescription = \"Official GitHub MCP Server\"\nauthors = [{ name = \"John Doe\" }]\ndependencies = [\n    \"uipath-mcp&gt;=0.0.99\",\n]\nrequires-python = \"&gt;=3.11\"\n</code></pre></p> </li> </ol>"},{"location":"mcp/how_to_pack_binary/#4-set-up-python-environment","title":"4. Set Up Python Environment","text":"# Initialize a new uv project in the current directoryuv venv# Activate the virtual environmentsource .venv/bin/activate# Install dependenciesuv sync"},{"location":"mcp/how_to_pack_binary/#5-authenticate-with-uipath","title":"5. Authenticate With UiPath","text":"uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful."},{"location":"mcp/how_to_pack_binary/#6-initialize-uipath-package","title":"6. Initialize UiPath Package","text":"\u280b Initializing UiPath project ...\u2713   Created '.env' file.\u2713   Created 'uipath.json' file. <p>Edit the generated <code>uipath.json</code> to include the executable: <pre><code>{\n  \"settings\": {\n    \"filesIncluded\": [\"github-mcp-server\"]\n  }\n}\n</code></pre></p>"},{"location":"mcp/how_to_pack_binary/#7-package-for-uipath","title":"7. Package for UiPath","text":"\u280b Packaging project ...Name       : mcp-github-serverVersion    : 0.0.1Description: Official GitHub MCP ServerAuthors    : John Doe\u2713  Project successfully packaged."},{"location":"mcp/how_to_pack_binary/#8-upload-to-uipath-orchestrator","title":"8. Upload to UiPath Orchestrator","text":"\u2819 Publishing most recent package: mcp-github-server.0.0.1.nupkg ...\u2713  Package published successfully!"},{"location":"mcp/how_to_pack_binary/#automating-with-github-actions","title":"Automating with GitHub Actions","text":"<p>To automate this process:</p> <ol> <li>Copy the example workflow to <code>.github/workflows/</code> in your repository.</li> <li>Go to GitHub Actions tab and run the workflow.</li> <li>Provide the version when prompted.</li> <li>Download the artifact after completion.</li> </ol> <p>The workflow handles all the manual steps automatically, including the crucial modification of <code>uipath.json</code> to include the executable in the package.</p>"},{"location":"mcp/quick_start/","title":"Quickstart Guide: UiPath Coded MCP Servers","text":""},{"location":"mcp/quick_start/#introduction","title":"Introduction","text":"<p>This guide provides instructions for setting up and running a UiPath coded MCP Server.</p>"},{"location":"mcp/quick_start/#prerequisites","title":"Prerequisites","text":"<p>You need:</p> <ul> <li>Python 3.11 or higher</li> <li><code>pip</code> or <code>uv</code> package manager</li> <li>A UiPath Automation Cloud account with appropriate permissions</li> <li>A UiPath Personal Access Token with Orchestrator API Access scopes</li> </ul>"},{"location":"mcp/quick_start/#creating-a-new-project","title":"Creating a New Project","text":"<p>Use <code>uv</code> for package management. To create a new project:</p> Linux, macOS, Windows BashWindows PowerShell mkdir examplecd example New-Item -ItemType Directory -Path exampleSet-Location example uvpip # Initialize a new uv project in the current directoryuv init . --python 3.11# Create a new virtual environment# By default, uv creates a virtual environment in a directory called .venvuv venvUsing CPython 3.11.16 interpreter at: [PATH]Creating virtual environment at: .venvActivate with: source .venv/bin/activate# Activate the virtual environment# For Windows PowerShell/ Windows CMD: .venv\\Scripts\\activate# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Install the uipath packageuv add uipath-mcp # Create a new virtual environmentpython -m venv .venv# Activate the virtual environment# For Windows PowerShell: .venv\\Scripts\\Activate.ps1# For Windows Bash: source .venv/Scripts/activatesource .venv/bin/activate# Upgrade pip to the latest versionpython -m pip install --upgrade pip# Install the uipath packagepip install uipath-mcp"},{"location":"mcp/quick_start/#create-your-first-uipath-coded-mcp-server","title":"Create Your First UiPath Coded MCP Server","text":"<p>Create your first MCP server</p> uipath new math-server\u280b Creating new mcp server 'math-server' in current directory ...\u2713  Created 'server.py' file.\u2713  Created 'mcp.json' file.\u2713  Created 'pyproject.toml' file.\ud83d\udca1  Initialize project: uipath init\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550Start 'math-server' as a self-hosted MCP server\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\ud83d\udca1  1. Set UIPATH_FOLDER_PATH environment variable\ud83d\udca1  2. Start the server locally: uipath run math-server <p>Warning</p> <p>uipath new command deletes all previous <code>.py</code> files in the current directory.</p> <p>This command creates the following files:</p> File Name Description <code>server.py</code> A sample MCP math server using FastMCP <code>mcp.json</code> Configuration file needed for coded UiPath MCP Servers. <code>pyproject.toml</code> Project metadata and dependencies as per PEP 518."},{"location":"mcp/quick_start/#initialize-project","title":"Initialize Project","text":"uipath init\u280b Initializing UiPath project ...\u2713   Created '.env' file.\u2713   Created 'uipath.json' file. <p>This command creates the following files:</p> File Name Description <code>.env</code> Environment variables and secrets (this file is not packed &amp; published). <code>uipath.json</code> Input/output JSON schemas and bindings."},{"location":"mcp/quick_start/#authenticate-with-uipath","title":"Authenticate With UiPath","text":"uipath auth\u280b Authenticating with UiPath ...\ud83d\udd17 If a browser window did not open, please open the following URL in your browser: [LINK]\ud83d\udc47 Select tenant:  0: Tenant1  1: Tenant2Select tenant number: 0Selected tenant: Tenant1\u2713  Authentication successful."},{"location":"mcp/quick_start/#run-the-mcp-server","title":"Run the MCP Server","text":"<p>There are two ways to run your coded MCP server:</p>"},{"location":"mcp/quick_start/#1-running-locally-on-prem","title":"1. Running Locally (On-Prem)","text":"<p>When running the server locally, JSON-RPC requests are tunneled from UiPath servers to your local server. During startup, the local server automatically registers itself with UiPath.</p> <p>Since MCP servers are folder-scoped in Orchestrator, you need to set the <code>UIPATH_FOLDER_PATH</code> environment variable. To do this:</p> <ol> <li>Copy the folder path from your Orchestrator interface</li> </ol> <p> </p> <ol> <li>Add it to the <code>.env</code> file (created during <code>uipath init</code>) as:    <pre><code>UIPATH_FOLDER_PATH=&lt;Copied folder path&gt;\n</code></pre></li> </ol> # Start the serveruipath run math-serverInitializing tracer instance. This should only be done once per process.HTTP Request: GET https://***/orchestrator_/api/FoldersNavigation/GetFoldersForCurrentUser?searchText=Agents&amp;skip=0&amp;take=20 \"HTTP/1.1 200 OK\"Folder key: ***Initializing client session...Initialization successfulRegistering server runtime ......"},{"location":"mcp/quick_start/#verifying-the-server","title":"Verifying the Server","text":"<p>Once started successfully, your MCP server will appear in Orchestrator. Navigate to the MCP Servers tab in your configured folder:</p> <p> </p> <p>You can inspect the available tools by clicking on the server:</p> <p> </p> <p>Now we can connect to the server using any MCP client. See the Connecting to the MCP Server section.</p>"},{"location":"mcp/quick_start/#2-running-on-uipath-automation-cloud","title":"2. Running on UiPath Automation Cloud","text":"<p>Info</p> <p>This quickstart guide provides instructions for deploying the MCP Server in My Workspace folder. Choosing this folder simplifies the configuration process, as you won\u2019t need to manually handle the following:</p> <ul> <li> <p>Serverless machine allocation</p> </li> <li> <p>Unattended robot permissions</p> </li> <li> <p>Process creation (processes are automatically provisioned when a package is published to <code>My Workspace</code>)</p> </li> </ul> <p>If you prefer to deploy the MCP Server in a different folder, additional steps are required:</p> <ol> <li> <p>Create a process from the MCP Server package.</p> </li> <li> <p>Ensure a serverless runtime (machine) is assigned to the target folder in Orchestrator.</p> </li> <li> <p>Confirm that a user with unattended robot permissions is assigned to the target folder.</p> </li> </ol> <p>To deploy your MCP server to UiPath Automation Cloud, follow these steps:</p>"},{"location":"mcp/quick_start/#optional-customize-the-package","title":"(Optional) Customize the Package","text":"<p>Update author details in <code>pyproject.toml</code>:</p> <pre><code>authors = [{ name = \"Your Name\", email = \"your.name@example.com\" }]\n</code></pre>"},{"location":"mcp/quick_start/#package-your-project","title":"Package Your Project","text":"uipath pack\u2839 Packaging project ...Name       : math-serverVersion    : 0.0.1Description: Description for math-server projectAuthors    : John Doe\u2713  Project successfully packaged."},{"location":"mcp/quick_start/#publish-the-mcp-server-package","title":"Publish The MCP Server Package","text":"uipath publish --my-workspace\u2819 Publishing most recent package: math-server.0.0.1.nupkg ...\u2713  Package published successfully!\u2826 Getting process information ...\ud83d\udd17 Process configuration link: [LINK]\ud83d\udca1 Use the link above to configure any environment variables <p>After publishing, you can configure and manage your MCP server through the UiPath Automation Cloud interface:</p>"},{"location":"mcp/quick_start/#configure-in-uipath-automation-cloud","title":"Configure in UiPath Automation Cloud","text":"<ol> <li>In <code>My Workspace</code>, navigate to the MCP Servers tab and click Add MCP Server</li> </ol> <ol> <li>In the configuration dialog:</li> </ol> <ul> <li>Select <code>Coded</code> as the server type</li> <li>Choose the <code>math-server</code> process</li> <li>Click Add to deploy the server</li> </ul> <p>Once deployed, the server automatically starts and registers its available tools. You can monitor the job status in the MCP Server side panel.</p>"},{"location":"mcp/quick_start/#connecting-to-the-mcp-server","title":"Connecting to the MCP Server","text":"<p>You can connect to your MCP server using any MCP client. Here's what you need:</p> <ol> <li>MCP Server URL: Copy this from the UiPath MCP Servers page in Orchestrator</li> </ol> <p> </p> <ol> <li>Authentication: Use your Personal Access Token (PAT) with Orchestrator API Access scopes as authorization header</li> <li>Transport: Configure the client to use HTTP Streamable transport</li> </ol>"},{"location":"mcp/quick_start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have successfully set up, created, published, and run a coded UiPath MCP Server. \ud83d\ude80</p> <p>For more coded MCP samples, please refer to our samples section in GitHub.</p>"}]}